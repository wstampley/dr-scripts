=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#forge
=end

custom_require.call(%w[common common-arcana common-crafting common-travel events drinfomon])

class Forge
  include DRC
  include DRCC
  include DRCT
  include DRCA

  def initialize
    arg_definitions = [
      [
        { name: 'book_type', display: 'book type', options: %w[black armor weapon], description: 'What smithing type is this item.' },
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Chapter containing the item.' },
        { name: 'recipe_name', display: 'recipe name', regex: /^[A-z\s\-\']+$/i, variable: true, description: 'Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'metal', regex: /\w+/i, variable: true, description: 'Type of metal ingot to use.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'book_type', display: 'book type', options: %w[black armor weapon], description: 'What smithing type is this item.' },
        { name: 'instruction', regex: /\w+/i, variable: true, description: 'instruction noun' },
        { name: 'metal', regex: /\w+/i, variable: true, description: 'Type of metal ingot to use.' },
        { name: 'noun', regex: /\w+/i, variable: true }
      ],
      [
        { name: 'temper', regex: /temper/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to temper.' }
      ],
      [
        { name: 'balance', regex: /balance/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to balance.' }
      ],
      [
        { name: 'hone', regex: /hone/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to hone.' }
      ],
      [
        { name: 'lighten', regex: /lighten/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to lighten.' }
      ],
      [
        { name: 'resume', regex: /resume/i },
        { name: 'book_type', display: 'book type', options: %w[black armor weapon], description: 'What smithing type is this item.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to resume.' }
      ]
    ]

    args = parse_args(arg_definitions)

    @settings = get_settings
    @hometown = @settings.hometown
    @stamp = @settings.mark_crafted_goods
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.forging_belt
    @training_spells = @settings.crafting_training_spells
    @equipmanager = EquipmentManager.new
    hammer_info = @equipmanager.get_tool_info('forging', 'hammer')
    @hammer = "#{hammer_info.adjective} #{hammer_info.name}"
    shovel_info = @equipmanager.get_tool_info('forging', 'shovel')
    @shovel = "#{shovel_info.adjective} #{shovel_info.name}"

    @item = args.noun
    wait_for_script_to_complete('buff', ['forge'])

    Flags.add('forge-assembly', 'another finished \S+ shield (handle)', 'another finished wooden (hilt|haft)', 'another finished (long|short|small|large) leather (cord|backing)', 'another finished (small|large) cloth (padding)', 'another finished (long|short) wooden (pole)', 'ready to be woven into and around the material')
    Flags.add('hone-done', 'the metal now needs protection by pouring oil on it')
    if args.temper
      temper
    elsif args.hone
      hone
    elsif args.balance
      balance
    elsif args.lighten
      lighten
    elsif args.resume
      @book_type = args.book_type
      analyze_item
    else
      @book_type = args.book_type
      @chapter = args.chapter
      @instruction = args.instruction
      @recipe_name = args.recipe_name
      @metal = args.metal
      smith
    end
  end

  def get_item(name)
    get_crafting_item(name, @bag, @bag_items, @belt)
  end

  def stow_item(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def turn_to(section)
    unless section
      echo('Failed to find recipe in book, buy a better book?')
      stow_item('book')
      magic_cleanup
      exit
    end
    bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end

  def temper
    unless left_hand =~ /#{@item}/i || right_hand =~ /#{@item}/i
      echo('***Please hold the item to temper.***')
      magic_cleanup
      exit
    end
    crafting_magic_routine(@settings)
    bput("put my #{@item} on the forge", 'Put your item onto the forge')
    temper_turn(true)
  end

  def hone
    find_grindstone(@hometown)
    crafting_magic_routine(@settings)
    get_item('weaponsmithing book')
    turn_to("page #{find_recipe(10, 'metal weapon honing')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    Flags.reset('hone-done')
    do_hone
  end

  def balance
    find_grindstone(@hometown)
    crafting_magic_routine(@settings)
    get_item('weaponsmithing book')
    turn_to("page #{find_recipe(10, 'metal weapon balancing')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    Flags.reset('hone-done')
    do_hone
  end

  def lighten
    find_grindstone(@hometown)
    crafting_magic_routine(@settings)
    get_item('armorsmithing book')
    turn_to("page #{find_recipe(5, 'metal armor lightening')}")
    bput('study my book', 'Roundtime')
    stow_item('book')
    @equipmanager.get_tool?('forging', 'plier')
    bput("pull my #{@item} with my pliers", 'must be pounded free')
    @equipmanager.return_tool?('forging', 'plier')
    bput("put #{@item} on anvil", 'You put')
    @equipmanager.get_tool?('forging', 'hammer')
    @equipmanager.get_tool?('forging', 'tongs')
    bput("pound #{@item} with my #{@hammer}", 'roundtime')
    @equipmanager.return_tool?('forging', 'hammer')
    @equipmanager.return_tool?('forging', 'tongs')
    bput("get #{@item}", 'You get')
    do_lighten
  end

  def spin_grindstone
    until bput('turn grind', 'keeping it spinning fast', 'Roundtime') == 'keeping it spinning fast'
      pause
      waitrt?
    end
  end

  def do_hone
    spin_grindstone
    crafting_magic_routine(@settings)
    case bput("push grind with #{@item}", 'The grinding has left many nicks and burs in the metal that should be cleaned away', 'roundtime')
    when /nicks and burs/
      get_item('wire brush')
      bput("rub #{@item} with my brush", 'roundtime')
      stow_item('brush')
    end
    pause
    waitrt?
    if Flags['hone-done']
      pour_oil
    else
      crafting_magic_routine(@settings)
      do_hone
    end
  end

  def do_lighten
    spin_grindstone
    crafting_magic_routine(@settings)
    case bput("push grind with #{@item}", 'With the grinding complete', 'roundtime')
    when 'With the grinding complete'
      bput("put #{@item} on anvil", 'You put')
      @equipmanager.get_tool?('forging', 'hammer')
      @equipmanager.get_tool?('forging', 'tongs')
      bput("pound #{@item} with my #{@hammer}", 'roundtime')
      @equipmanager.return_tool?('forging', 'hammer')
      @equipmanager.return_tool?('forging', 'tongs')
      bput("get #{@item}", 'You get')
      @equipmanager.get_tool?('forging', 'pliers')
      bput("pull my #{@item} with my pliers", 'roundtime')
      @equipmanager.return_tool?('forging', 'pliers')
      pour_oil
    else
      crafting_magic_routine(@settings)
      do_lighten
    end
  end

  def temper_turn(first = false)
    waitrt?
    crafting_magic_routine(@settings)
    command = first ? "put my #{@item} on the forge" : "turn #{@item} on forge with my tongs"

    case DRC.bput(command,
            'needs more fuel', 'need some more fuel',
            'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel',
            'Roundtime',
            'metal looks to be in need of some oil to preserve', 'to be cleaned')
    when 'needs more fuel', 'need some more fuel'
      @equipmanager.return_tool?('forging', 'tongs')
      @equipmanager.get_tool?('forging', 'shovel')
      DRC.bput("push fuel with my #{@shovel}", 'Roundtime')
      waitrt?
      @equipmanager.return_tool?('forging', 'shovel')
    when 'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel'
      @equipmanager.get_tool?('forging', 'bellows')
      bput('push my bellows', 'Roundtime')
      waitrt?
      @equipmanager.return_tool?('forging', 'bellows')
    when 'metal looks to be in need of some oil to preserve', 'to be cleaned'
      temper_finish
      return
    end

    @equipmanager.get_tool?('forging', 'tongs') unless right_hand
    temper_turn
  end

  def temper_finish
    crafting_magic_routine(@settings)
    @equipmanager.return_tool?('forging', 'tongs')
    fput("get #{@item} from forge")
    pour_oil
  end

  def smith
    crafting_magic_routine(@settings)
    if @chapter
      get_item("#{@book_type} book")
      echo('*** You will need to upgrade to a journeyman or master book before 176 ranks! ***') if DRSkill.getrank('Forging') == 175
      turn_to("page #{find_recipe(@chapter, @recipe_name)}")
      bput('study my book', 'Roundtime')
      stow_item('book')
    elsif @instruction
      get_item("#{@instruction} instructions")
      if /again/ =~ bput('study my instructions', 'Roundtime', 'Study them again')
        bput('study my instructions', 'Roundtime', 'Study them again')
      end
      stow_item('instructions')
    end
    get_item("#{@metal} ingot")
    bput('put my ingot on anvil', 'You put your')
    @equipmanager.get_tool?('forging', 'hammer')
    @equipmanager.get_tool?('forging', 'tongs')
    pound('ingot')
  end

  def pound(item = @item)
    waitrt?
    crafting_magic_routine(@settings)
    case bput("pound #{item} on anvil with my #{@hammer}",
              /You must be holding .* to do that.$/,
              /You must be holding some metal tongs in your other hand to do that/,
              'needs more fuel', 'need some more fuel',
              'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel',
              'Roundtime',
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'straightening along the horn of the anvil', 'would benefit from some soft reworking.',
              'sets using tongs', 'into wire using a mandrel or mold set', 'set using tongs',
              'That tool does not seem',
              'push them deep into the fire to set',
              'You believe you can assemble',
              'You need a larger volume of metal',
              'I could not find what you were referring to')
    when /You must be holding .* to do that.$/
      @equipmanager.get_tool?('forging', 'hammer')
      pound(item)
    when /You must be holding some metal tongs in your other hand to do that/
      @equipmanager.get_tool?('forging', 'tongs')
      pound(item)
    when 'needs more fuel', 'need some more fuel'
      add_fuel
    when 'As you finish working the fire dims and produces less heat', 'As you finish the fire flickers and is unable to consume its fuel'
      bellows
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    when 'straightening along the horn of the anvil', 'would benefit from some soft reworking.', 'sets using tongs', 'set using tongs', 'into wire using a mandrel or mold set'
      turn_item
    when 'That tool does not seem'
      analyze_item
    when 'You believe you can assemble'
      @equipmanager.return_tool?('forging', 'hammer')
      @equipmanager.return_tool?('forging', 'tongs')
      bput("get #{@item} from anvil", 'You get')
      assemble_part
      Flags.reset('forge-assembly')
      bput("put #{@item} on anvil", 'You put')
      analyze_item
    when 'You need a larger volume of metal'
      echo '***You need a larger ingot to forge this item.***'
      @equipmanager.return_tool?('forging', 'hammer')
      @equipmanager.return_tool?('forging', 'tongs')
      magic_cleanup
      exit
    when 'I could not find what you were referring to'
      echo '*** ERROR TRYING TO CRAFT, EXITING ***'
      @equipmanager.return_tool?('forging', 'hammer')
      @equipmanager.return_tool?('forging', 'tongs')
      exit
    else
      crafting_magic_routine(@settings)
      pound
    end
  end

  def add_fuel
    @equipmanager.return_tool?('forging', 'tongs')
    @equipmanager.get_tool?('forging', 'shovel')
    case bput("push fuel with my #{@shovel}", 'Roundtime', 'That tool does not seem')
    when 'That tool does not seem'
      analyze_item
    else
      waitrt?
      @equipmanager.return_tool?('forging', 'shovel')
      @equipmanager.get_tool?('forging', 'tongs')
      pound
    end
  end

  def bellows
    @equipmanager.return_tool?('forging', 'hammer')
    @equipmanager.get_tool?('forging', 'bellows')
    case bput('push my bellows', 'Roundtime', 'That tool does not seem')
    when 'That tool does not seem'
      analyze_item
    else
      waitrt?
      @equipmanager.return_tool?('forging', 'bellows')
      @equipmanager.get_tool?('forging', 'hammer')
      pound
    end
  end

  def turn_item
    waitrt?
    crafting_magic_routine(@settings)
    case bput("turn #{@item} on anvil with my tongs",
              'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub',
              'Roundtime',
              'That tool does not seem')
    when 'ready for cooling in the slack tub', 'ready for a quench hardening in the slack tub'
      slack_tub
    when 'That tool does not seem'
      analyze_item
    else
      pound
    end
  end

  def slack_tub
    @equipmanager.return_tool?('forging', 'hammer')
    @equipmanager.return_tool?('forging', 'tongs')
    Flags.reset('forge-assembly')
    bput('push slack tub', 'Roundtime')
    waitrt?
    bput("get #{@item} from anvil", 'You get')

    assemble_part

    if 'armorsmithing'.include? @book_type
      @equipmanager.get_tool?('forging', 'pliers')
      loop do
        case bput("pull my #{@item} with my pliers", 'roundtime', 'need of some oil', 'That tool does not seem suitable for that task', 'doesn\'t appear suitable for working')
        when 'That tool does not seem suitable for that task', 'doesn\'t appear suitable for working'
          @equipmanager.return_tool?('forging', 'pliers')
          bput("put #{@item} on anvil", 'You put')
          Flags.reset('forge-assembly')
          analyze_item
          return
        when 'need of some oil'
          break
        end
        pause
        waitrt?
        @equipmanager.return_tool?('forging', 'pliers')
        assemble_part
        @equipmanager.get_tool?('forging', 'pliers')
      end
      @equipmanager.return_tool?('forging', 'pliers')

    elsif 'weaponsmithing'.include? @book_type
      grind_item
    end

    add_oil
  end

  def assemble_part
    while Flags['forge-assembly']
      part = nil
      part = if Flags['forge-assembly'][0] == 'ready to be woven into and around the material'
               'padding'
             else
               Flags['forge-assembly'].to_a[1..-1].join('.')
             end
      Flags.reset('forge-assembly')
      fput("get my #{part}")
      if /not required/ =~ bput("assemble my #{@item} with my #{part}", 'affix it securely in place', 'and tighten the pommel to secure it', 'carefully mark where it will attach when you continue crafting', 'is not required to continue crafting')
        fput("stow my #{part}")
      end
      waitrt?
    end
  end

  def grind_item
    find_grindstone(@hometown)
    spin_grindstone
    bput("push grind with my #{@item}", 'Roundtime', 'needs protection')
    waitrt?
  end

  def pour_oil
    ords = %w[second third fourth fifth sixth]
    crafting_magic_routine(@settings)
    get_item('oil')
    while ords.any?
      case bput("pour my oil on my #{@item}", 'Roundtime', 'Applying the final touches', "You can't pour", 'You pour all of')
      when 'Roundtime', 'Applying the final touches'
        waitrt?
        stow_item('oil')
        break
      when 'You pour all of'
        get_item('oil')
      else
        stow_item('oil')
        get_item("#{ords.shift} oil")
      end
    end
  end

  def add_oil
    pour_oil

    return unless @stamp
    @equipmanager.get_tool?('forging', 'stamp')
    fput("mark my #{@item} with my stamp")
    pause
    waitrt?
    @equipmanager.return_tool?('forging', 'stamp')
    magic_cleanup
  end

  def analyze_item
    waitrt?
    crafting_magic_routine(@settings)
    stow_item(left_hand) # store contents of both hands, reacquire hammer and tongs
    stow_item(right_hand)
    @equipmanager.get_tool?('forging', 'hammer')
    @equipmanager.get_tool?('forging', 'tongs')

    case bput("analyze #{@item}", 'The metal is ready to be cooled', 'Almost all of the coal has been consumed', 'ready for more pounding', 'metal will quickly rust', 'The forge fire has died down', 'metal is in need of some gentle bending', 'to be pulled', 'ready to be pounded', 'would obstruct pounding', 'ready for pounding', 'with the pliers to stitch them together')
    when 'The metal is ready to be cooled'
      slack_tub
    when 'Almost all of the coal has been consumed'
      add_fuel
    when 'ready for more pounding', 'ready to be pounded', 'ready for pounding', 'would obstruct pounding'
      pound
    when 'metal will quickly rust'
      stow_item(left_hand)
      stow_item(right_hand)
      bput("get #{@item} from anvil", 'You get')
      add_oil
    when 'The forge fire has died down'
      bellows
    when 'metal is in need of some gentle bending', 'to be pulled', 'a mandrel or mold set'
      turn_item
    when 'with the pliers to stitch them together'
      @equipmanager.return_tool?('forging', 'tongs')
      @equipmanager.get_tool?('forging', 'pliers')
      bput("pull my #{@item} with my pliers", 'roundtime')
      @equipmanager.return_tool?('forging', 'pliers')
      analyze_item
    end
  end

  def magic_cleanup
    return if @training_spells.empty?

    bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    bput('release mana', 'You release all', "You aren't harnessing any mana")
    bput('release symb', "But you haven't", 'You release', 'Repeat this command')
  end
end

before_dying do
  Flags.delete('forge-assembly')
  Flags.delete('hone-done')
end

Forge.new
