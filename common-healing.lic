=begin
  Documentation: https://elanthipedia.play.net/Lich_script_development#common-healing
=end

custom_require.call(%w[common common-items common-healing-data])

module DRCH
  module_function

  # Uses HEALTH command to check for poisons, diseases, bleeders, parasites, and lodged items.
  # Based on this diagnostic information, you should be able to prioritize how you heal
  # yourself with medicinal potions and salves, or healing spells.
  def check_health
    parasites_regex = Regexp.union($DRCH_PARASITES_REGEX_LIST)
    wounds_line = nil
    parasites_line = nil
    lodged_line = nil
    diseased = false
    poisoned = false

    DRC.bput('health', 'You have', 'You feel somewhat tired and seem to be having trouble breathing')
    pause 0.5
    health_lines = reget(50).map(&:strip).reverse

    health_lines.each do |line|
      case line
      when /^Your body feels\b.*(?:strength|battered|beat up|bad shape|death's door|dead)/
        # While iterating the game output in reverse,
        # this line represents the start of `HEALTH` command
        # so we can now break out of the loop and avoid
        # parsing text prior to the latest HEALTH command.
        # We don't need to parse this line, just use implicit `health` numeric variable.
        break
      when /Your spirit feels\b.*(?:mighty and unconquerable|full of life|strong|wavering slightly|shaky|weak|cold|empty|lifeless|dead)/
        # This line is your spirit health.
        # We don't need to parse this line, just use implicit `spirit` numeric variable.
        next
      when /^You have (?!no significant injuries)(?!.* lodged .* into your)(?!.* infection)(?!.* poison(?:ed)?)(?!.* #{parasites_regex})/
        wounds_line = line
      when /^You have .* lodged .* into your/
        lodged_line = line
      when /^You have a .* on your/, parasites_regex
        parasites_line = line
      when /^You have a dormant infection/, /^Your wounds are infected/, /^Your body is covered in open oozing sores/
        diseased = true
      when /^You have .* poison(?:ed)?/, /^You feel somewhat tired and seem to be having trouble breathing/
        poisoned = true
      end
    end

    bleeders = parse_bleeders(health_lines)
    wounds = parse_wounds(wounds_line)
    parasites = parse_parasites(parasites_line)
    lodged_items = parse_lodged_items(lodged_line)
    score = calculate_score(wounds)

    return {
      'wounds' => wounds,
      'bleeders' => bleeders,
      'parasites' => parasites,
      'lodged' => lodged_items,
      'poisoned' => poisoned,
      'diseased' => diseased,
      'score' => score
    }
  end

  # Uses PERCEIVE HEALTH SELF command to check for wounds and scars.
  # Returns a map of any wounds where the keys
  # are the severity and the values are the list of wounds.
  def perceive_health
    return unless DRStats.empath?

    wounds = Hash.new { |h, k| h[k] = [] }

    case DRC.bput('perceive health self', 'feel only an aching emptiness', 'Roundtime')
    when 'feel only an aching emptiness'
      # Empath is permashocked and cannot perceive wounds.
      return check_health
    end

    pause 0.5
    health_lines = reget(100).map(&:strip).reverse

    # Example of what we're parsing:
    # ===
    # Your injuries include...
    # Wounds to the LEFT ARM:
    # Fresh External:  cuts and bruises about the left arm -- more than minor
    # Scars External:  severe scarring and chunks of flesh missing from the left arm -- very severe
    # Fresh Internal:  minor swelling and bruising around the left arm -- more than minor
    # Scars Internal:  a completely paralyzed left arm -- useless
    # ===
    if health_lines.grep(/^Your injuries include\b/).any?
      perceived_wounds = Hash.new { |h, k| h[k] = [] }
      body_part = nil
      health_lines
        .take_while { |line| line != 'Your injuries include...' }
        .reverse # put back in normal order so we parse <body part> line then <wound> lines
        .each do |line|
          case line
          when /^Wounds to the (.+):/
            body_part = Regexp.last_match(1)
            perceived_wounds[body_part] = []
          when /^(Fresh|Scars) (External|Internal)/
            # Do regex then grab matches for wound details.
            line =~ $DRCH_PERCEIVE_HEALTH_SEVERITY_REGEX
            severity = $DRCH_WOUND_TO_SEVERITY_MAP[Regexp.last_match[:severity]]
            is_internal = Regexp.last_match[:location] == 'Internal'
            is_scar = Regexp.last_match[:freshness] == 'Scars'
            perceived_wounds[body_part] << Wound.new(
              body_part: body_part,
              severity: severity,
              is_internal: is_internal,
              is_scar: is_scar
            )
          end
        end
    end

    # Now go through the preceived wounds map (key=body part)
    # and bucket the wounds by severity into the 'wounds' map (key=severity).
    perceived_wounds.values.flatten.each do |wound|
      wounds[wound.severity] << wound
    end

    # The perceive command incurs roundtime.
    # We delayed waiting until now so that
    # the script can use that time to parse
    # the output rather than waiting unnecessarily.
    waitrt?

    # Return same response as `check_health`
    # but with wound details per perceive health.
    health_data = check_health
    health_data['wounds'] = wounds
    return health_data
  end

  def perceive_health_other(target)
    return unless DRStats.empath?

    case DRC.bput("touch #{target}", 'Touch what', 'feels cold and you are unable to sense anything', 'avoids your touch', 'You sense a successful empathic link')
    when 'avoids your touch', 'feels cold and you are unable to sense anything', 'Touch what'
      return nil
    end

    pause 0.5
    health_lines = reget(100).map(&:strip).reverse

    # Example of what we're parsing:
    # ===
    # Corgar's injuries include...
    # Wounds to the LEFT ARM:
    # Fresh External:  cuts and bruises about the left arm -- more than minor
    # Scars External:  severe scarring and chunks of flesh missing from the left arm -- very severe
    # Fresh Internal:  minor swelling and bruising around the left arm -- more than minor
    # Scars Internal:  a completely paralyzed left arm -- useless
    # ===
    if health_lines.grep(/^(?<name>.*)'s injuries include\b/).any?
      target_name = Regexp.last_match[:name]
      stop_line = "#{target_name}'s injuries include..."
      perceived_wounds = Hash.new { |h, k| h[k] = [] }
      body_part = nil
      health_lines
        .take_while { |line| line != stop_line }
        .reverse # put back in normal order so we parse <body part> line then <wound> lines
        .each do |line|
          case line
          when /^Wounds to the (.+):/
            body_part = Regexp.last_match(1)
            perceived_wounds[body_part] = []
          when /^(Fresh|Scars) (External|Internal)/
            # Do regex then grab matches for wound details.
            line =~ $DRCH_PERCEIVE_HEALTH_SEVERITY_REGEX
            severity = $DRCH_WOUND_TO_SEVERITY_MAP[Regexp.last_match[:severity]]
            is_internal = Regexp.last_match[:location] == 'Internal'
            is_scar = Regexp.last_match[:freshness] == 'Scars'
            perceived_wounds[body_part] << Wound.new(
              body_part: body_part,
              severity: severity,
              is_internal: is_internal,
              is_scar: is_scar
            )
          end
        end
    end

    # Now go through the preceived wounds map (key=body part)
    # and bucket the wounds by severity into the 'wounds' map (key=severity).
    wounds = Hash.new { |h, k| h[k] = [] }
    perceived_wounds.values.flatten.each do |wound|
      wounds[wound.severity] << wound
    end

    score = calculate_score(wounds)

    # The perceive command incurs roundtime.
    # We delayed waiting until now so that
    # the script can use that time to parse
    # the output rather than waiting unnecessarily.
    waitrt?

    return {
      'wounds' => wounds,
      'score' => score
    }
  end

  # Given lines of text from the HEALTH command output,
  # returns a map of any bleeding wounds where the keys
  # are the severity and the values are the list of bleeding wounds.
  def parse_bleeders(health_lines)
    bleeders = Hash.new { |h, k| h[k] = [] }
    bleeder_line_regex = /^\b(inside\s+)?((l\.|r\.|left|right)\s+)?(head|eye|neck|chest|abdomen|back|arm|hand|leg)\b/
    if health_lines.grep(/^Bleeding|^\s*\bArea\s+Rate\b/).any?
      health_lines
        .drop_while { |line| !(bleeder_line_regex =~ line) }
        .take_while { |line| bleeder_line_regex =~ line }
        .each do |line|
          # Do regex then look for the body part match.
          line =~ $DRCH_WOUND_BODY_PART_REGEX
          body_part = Regexp.last_match.names.find { |x| Regexp.last_match[x.to_sym] }
          body_part = Regexp.last_match[:part] if body_part == 'part'
          # Standardize on full word for 'left' and 'right'.
          # Internal bleeders use the abbreviations.
          body_part = body_part.gsub('l.', 'left').gsub('r.', 'right')
          # Check for the bleeding severity.
          bleed_rate = /(?:head|eye|neck|chest|abdomen|back|arm|hand|leg)\s+(.+)/.match(line)[1]
          severity = $DRCH_BLEED_RATE_TO_SEVERITY_MAP[bleed_rate][:severity]
          # Check if internal or not. Want an actual boolean result here, not just "truthy/falsey".
          is_internal = line =~ /^inside/ ? true : false
          bleeders[severity] << Wound.new(
            body_part: body_part,
            severity: severity,
            bleeding_rate: bleed_rate,
            is_internal: is_internal
          )
        end
    end
    return bleeders
  end

  # Given the line of text from the HEALTH command output
  # that expresses external and internal wounds and scars,
  # returns a map of any wounds where the keys
  # are the severity and the values are the list of wounds.
  def parse_wounds(wounds_line)
    wounds = Hash.new { |h, k| h[k] = [] }
    if wounds_line
      # Remove commas within wound text so we can split on each wound phrase.
      # For example "a bruised, swollen and slashed left eye" => "a bruised swollen and slashed left eye"
      wounds_line = wounds_line.gsub($DRCH_WOUND_COMMA_SEPARATOR, '')
      # Remove the tidbits at the start and end of the sentence that aren't pertinent.
      wounds_line = wounds_line.gsub(/^You have\s+/, '').gsub(/\.$/, '')
      wounds_line.split(',').map(&:strip).each do |wound|
        $DRCH_WOUND_SEVERITY_REGEX_MAP.each do |regex, template|
          next unless wound =~ regex

          body_part = Regexp.last_match.names.find { |x| Regexp.last_match[x.to_sym] }
          body_part = Regexp.last_match[:part] if body_part == 'part'
          wounds[template[:severity]] << Wound.new(
            body_part: body_part,
            severity: template[:severity],
            is_internal: template[:internal],
            is_scar: template[:scar]
          )
        end
      end
    end
    return wounds
  end

  # Given the line of text from the HEALTH command output
  # that expresses parasites latched to you,
  # returns a map of any parasites where the keys
  # are the severity and the values are the list of wounds.
  def parse_parasites(parasites_line)
    parasites = Hash.new { |h, k| h[k] = [] }
    if parasites_line
      # Remove the tidbits at the start and end of the sentence that aren't pertinent.
      parasites_line = parasites_line.gsub(/^You have\s+/, '').gsub(/\.$/, '')
      parasites_line.split(',').map(&:strip).each do |parasite|
        # Do regex then look for the body part match.
        parasite =~ $DRCH_PARASITE_BODY_PART_REGEX
        body_part = Regexp.last_match[:part].to_s
        severity = 1 # Do parasites have a range of severities?
        parasites[severity] << Wound.new(
          body_part: body_part,
          severity: severity
        )
      end
    end
    return parasites
  end

  # Given the line of text from the HEALTH command output
  # that expresses items lodged into you,
  # returns a map of any lodged items where the keys
  # are the severity and the values are the list of wounds.
  def parse_lodged_items(lodged_line)
    lodged_items = Hash.new { |h, k| h[k] = [] }
    if lodged_line
      # Remove the tidbits at the start and end of the sentence that aren't pertinent.
      lodged_line = lodged_line.gsub(/^You have\s+/, '').gsub(/\.$/, '')
      lodged_line.split(',').map(&:strip).each do |wound|
        # Do regex then look for the body part match.
        wound =~ $DRCH_LODGED_BODY_PART_REGEX
        body_part = Regexp.last_match.names.find { |x| Regexp.last_match[x.to_sym] }
        body_part = Regexp.last_match[:part] if body_part == 'part'
        # Check for the lodged severity.
        severity = /\blodged\s+(.*)\s+into your\b/.match(wound)[1]
        severity = $DRCH_LODGED_TO_SEVERITY_MAP[severity]
        lodged_items[severity] << Wound.new(
          body_part: body_part,
          severity: severity
        )
      end
    end
    return lodged_items
  end

  def bind_wound(body_part, person = 'my')
    # Either you tended it or it already has bandages on. Good job!
    tend_success = [
      /You work carefully at tending/,
      /That area has already been tended to/,
      /That area is not bleeding/
    ]
    # Yeouch, you couldn't tend the wound. Might have made it worse!
    tend_failure = [
      /You fumble/,
      /too injured for you to do that/
    ]
    # You dislodged ammo or a parasite, discard it.
    tend_dislodge = [
      /You \w+ remove/
    ]
    snap = [DRC.left_hand, DRC.right_hand]
    result = DRC.bput("tend #{person} #{body_part}", *tend_success, *tend_failure, *tend_dislodge)
    waitrt?
    case result
    when *tend_dislodge
      DRCI.dispose_trash(DRC.left_hand) if DRC.left_hand != snap.first
      DRCI.dispose_trash(DRC.right_hand) if DRC.right_hand != snap.last
      bind_wound(body_part, person)
    when *tend_failure
      false
    else
      true
    end
  end

  def unwrap_wound(body_part, person = 'my')
    DRC.bput("unwrap #{person} #{body_part}", 'You unwrap .* bandages', 'That area is not tended')
    waitrt?
  end

  # Skill check to tend a bleeding wound.
  # If you're not skilled enough you may
  # make things worse and incur long roundtime.
  def skilled_to_tend_wound?(bleed_rate)
    min_skill = $DRCH_BLEED_RATE_TO_SEVERITY_MAP[bleed_rate][:skill_to_tend]
    return false if min_skill.nil?
    DRSkill.getrank('First Aid') >= min_skill
  end

  # Compute a weighted summary score from a wound list.
  # Commonly used for thresholding for healing activities
  def calculate_score(wounds_by_severity)
    wounds_by_severity.map { |severity, wound_list| (severity**2) * wound_list.count }.reduce(:+)
  end

  class Wound
    attr_accessor :body_part, :severity, :bleeding_rate

    def initialize(
      # The part of the body that's wounded, like 'left hand' or 'abdomen'.
      body_part: nil,
      # Severity number for triaging this wound. Larger number is more severe.
      severity: nil,
      # At this time, at what rate is the wound bleeding, like 'light' or 'moderate(tended)'.
      bleeding_rate: nil,
      # Is this an internal wound (true) or external (false)?
      is_internal: false,
      # Is this a scar (true) or fresh wound (false)?
      is_scar: false
    )
      @body_part = body_part.nil? ? nil : body_part.downcase
      @severity = severity
      @bleeding_rate = bleeding_rate.nil? ? nil : bleeding_rate.downcase
      @is_internal = !!is_internal
      @is_scar = !!is_scar
    end

    def bleeding?
      return !@bleeding_rate.nil? && !@bleeding_rate.empty? && @bleeding_rate != '(tended)'
    end

    def internal?
      return @is_internal
    end

    def scar?
      return @is_scar
    end

    def location
      internal? ? 'internal' : 'external'
    end

    def type
      scar? ? 'scar' : 'wound'
    end
  end
end
