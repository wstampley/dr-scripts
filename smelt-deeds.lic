=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#smelt-deeds
=end

custom_require.call(%w[common common-items common-crafting equipmanager])

class SmeltDeeds
  include DRC
  include DRCC
  include DRCI

  def initialize
    arg_definitions = [
      [
        { name: 'material', regex: /\w+/i, optional: true, description: 'Single material to smelt' }
      ]
    ]
    args = parse_args(arg_definitions)
    alloys = %w[steel bronze pewter brass]
    all_metals = get_data('items').metal_types - alloys
    all_metals += [args.material] if args.material && alloys.include?(args.material)

    @equipment_manager = EquipmentManager.new
    rod_info = @equipment_manager.get_tool_info('forging', 'rod')
    bellows_info = @equipment_manager.get_tool_info('forging', 'bellows')
    shovel_info = @equipment_manager.get_tool_info('forging', 'shovel')

    if rod_info.nil? || bellows_info.nil? || shovel_info.nil?
      DRC.message('Configuration is missing one or more required tools [craft: forging, tool_type: rod, bellows, shovel]')
      exit
    end

    @rod = "#{rod_info.adjective} #{rod_info.name}"
    @bellows = "#{bellows_info.adjective} #{bellows_info.name}"
    @shovel = "#{shovel_info.adjective} #{shovel_info.name}"

    if !DRCI.exists?(@rod) || !DRCI.exists?(@bellows) || !DRCI.exists?(@shovel)
      DRC.message('A TOOL WAS MISSING. FIND IT AND RESTART')
      exit
    end

    unless search?('deed')
      echo '***NO DEEDS FOUND TO SMELT***'
      return
    end
    @equipment_manager.empty_hands

    results = reget(100, 'deed is in')
    waitrt?

    results
      .each_with_object([]) { |line, array| array << line.match(/Your (.*) deed is in/)[1] }
      .each_with_object(Hash.new(0)) { |name, counts| counts[name] += 1 }
      .select { |metal, _count| all_metals.include?(metal) }
      .reject { |_metal, count| count <= 1 }
      .reject { |metal, _count| metal.nil? }
      .reject { |metal, _count| args.material && metal !~ /#{args.material}/i }
      .each_key { |metal| smelt(metal) }
  end

  def smelt(metal)
    settings = get_settings

    find_empty_crucible(settings.hometown)

    prepare_crucible(metal)

    wait_for_script_to_complete('smelt')

    return unless packet?

    bput('push my ingot with my packet', 'You push')
    bput('stow my deed', 'You put')
    bput('stow my packet', 'You put') # TODO: What happens if that was your last deed in the packet?
  end

  def packet?
    case bput('get my packet', 'You get', 'What were you referring to')
    when 'What were you referring to'
      bput('stow my ingot', 'You put')
      return false
    end
    true
  end

  def prepare_crucible(metal)
    $ORDINALS.each do |ordinal|
      break unless more_deeds?(ordinal, metal)
    end
  end

  def more_deeds?(ordinal, metal)
    loop do
      return false unless deed?(ordinal, metal)
      return true unless tap_deed?
      return false unless load_crucible?(right_hand)
      return false unless load_crucible?(left_hand)
    end
  end

  def deed?(ordinal, metal)
    case bput("get my #{ordinal} #{metal} deed", 'You get', 'What were you referring to')
    when 'What were you referring to'
      return false
    end
    true
  end

  def tap_deed?
    case bput('tap my deed', 'You pick up', 'The worker explains', 'drag it over in front of you')
    when 'The worker explains'
      bput('stow my deed', 'You put')
      return false
    when 'drag it over in front of you'
      bput('get ingot', 'You pick up') unless left_hand || right_hand
      waitrt?
      fix_standing
    end
    true
  end

  def load_crucible?(item)
    unless item.nil?
      case bput("put my #{item} in cruc", 'You put', 'at once would be dangerous')
      when 'at once would be dangerous'
        echo '***CRUCIBLE IS FULL***'
        @equipment_manager.empty_hands
        return false
      end
    end
    true
  end
end

SmeltDeeds.new
