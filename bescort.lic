#   Documentation: https://elanthipedia.play.net/Lich_script_repository#bescort

custom_require.call(%w[common common-arcana common-items common-travel common-money drinfomon equipmanager events skill-recorder])

$turns_since_bad = 0

class MazeRoom
  include DRC
  include DRCT

  $CARDINALS = { 'n' => 's', 's' => 'n', 'ne' => 'sw', 'sw' => 'ne', 'nw' => 'se', 'se' => 'nw', 'e' => 'w', 'w' => 'e' }
  $ADJUSTMENTS = { 'n' => [0, 1], 's' => [0, -1], 'ne' => [1, 1], 'sw' => [-1, -1], 'nw' => [-1, 1], 'se' => [1, -1], 'e' => [1, 0], 'w' => [-1, 0] }

  attr_accessor :desc, :exits, :checked, :parent, :coords

  def initialize(came_from = nil, source_room = nil)
    if came_from
      @exits = { $CARDINALS[came_from] => source_room }
      source_room.exits[came_from] = self
      @coords = update_coords(source_room.coords, came_from)
    else
      @@room_list = []
      @exits = {}
      @coords = [0, 0]
    end

    populate_exits
    @@room_list << self
  end

  def find_room_by_coords(coords)
    @@room_list.find { |room| room.coords == coords }
  end

  def update_coords(coords, traveled)
    [coords.first + $ADJUSTMENTS[traveled].first, coords.last + $ADJUSTMENTS[traveled].last]
  end

  def best_path
    @@room_list.each do |room|
      room.checked = false
      room.parent = nil
    end
    @checked = true
    queue = [self]
    until queue.empty?
      current = queue.shift
      current.exits.each do |dir, child|
        return current.parent || dir if child.nil?
        next if child.checked
        child.checked = true
        child.parent = current.parent || dir
        queue << child
      end
    end
  end

  def condense_direction(direction)
    direction.gsub(/orth|est|ast|outh/i, '')
  end

  def populate_exits
    remaining_exits = XMLData.room_exits.map { |exit| condense_direction(exit) } - @exits.keys

    remaining_exits.each { |exit| @exits[exit] = nil }
  end

  def wander
    dir_to_go = @exits.keys.first if @exits.size == 1
    dir_to_go, = @exits.find { |_, room| room.nil? } unless dir_to_go
    dir_to_go, = best_path unless dir_to_go

    fix_standing
    move(dir_to_go)
    pause

    return @exits[dir_to_go] if @exits[dir_to_go]

    if existing_room = find_room_by_coords(update_coords(@coords, dir_to_go))
      @exits[dir_to_go] = existing_room
      existing_room.exits[$CARDINALS[dir_to_go]] = self
      return existing_room
    end

    MazeRoom.new(dir_to_go, self)
  end
end

class Bescort
  include DRC
  include DRCT
  include DRCA
  include DRCI
  include DRCM

  $ICE_PATH_HIB = %w[nw ne ne e ne ne ne nw sw w w nw]
  $ICE_PATH_SHARD = %w[se e e ne se sw sw sw w sw sw se]

  def initialize
    arg_definitions = [
      [
        { name: 'wilds', regex: /wilds/i, description: 'The Leucro and Geni wilds on the NTR.' },
        { name: 'mode', options: %w[exit leucro1 leucro2 geni], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'oshu_manor', regex: /oshu_manor/i, description: "The Seordhevor kartais & grave worms in Oshu'ehhrsk Manor. Near germish'din on the STR." },
        { name: 'mode', options: %w[exit worms kartais], description: 'kartais: takes you to seordhevor kartais. worms: takes you to grave worms exit: exits.' }
      ],
      [
        { name: 'faldesu', regex: /faldesu/i, description: 'The Faldesu river at the end of the NTR.' },
        { name: 'mode', options: %w[haven crossing], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'zaulfang', regex: /zaulfang/i, description: 'For crossing the Zaulfang swamp maze outside Haven' },
        { name: 'mode', options: %w[exit enter], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'gate_of_souls', regex: /gate_of_souls/i, description: 'For crossing the Blasted Plain between the Gate of Souls and Temple of Ushnish' },
        { name: 'mode', options: %w[exit blasted temple fangs fou], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'segoltha', regex: /segoltha/i, description: 'The Segoltha south of the crossing' },
        { name: 'mode', options: %w[north south west], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'crocs', regex: /crocs/i, description: 'Blue belly crocodiles on NTR' },
        { name: 'mode', options: %w[enter exit], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'ways', regex: /ways/i, description: 'Astral travelling' },
        { name: 'mode', options: %w[shard crossing leth riverhaven merkresh fang raven throne muspari aesry taisgath theren steppes], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'mammoth', regex: /mammoth/i, description: 'The mammoths between Acenamacra, Fang Cove, and Ratha' },
        { name: 'mode', options: %w[acen fang ratha], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'iceroad', regex: /iceroad/i, description: 'The ice road between Shard and Hibarnhvidar' },
        { name: 'mode', options: %w[shard hibarnhvidar], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'basalt', regex: /basalt/i, description: 'The ferry between Ratha and Necromancer Island' },
        { name: 'mode', options: %w[island ratha], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'balloon', regex: /balloon/i, description: 'The air ship between Langenfirth and Mriss' },
        { name: 'mode', options: %w[langenfirth mriss], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'dirigible', regex: /dirigible/i, description: 'The air ship between Shard and Aesry' },
        { name: 'mode', options: %w[shard aesry], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'airship', regex: /airship/i, description: 'The airship between Crossing and Muspari' }
      ],
      [
        { name: 'therenropebridge', regex: /therenropebridge/i, description: 'The rope bridge between Theren and Rossman\'s Landing' },
        { name: 'mode', options: %w[totheren torossman], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'gondola', regex: /gondola/i, description: 'Gondola between Shard and Leth Deriel' },
        { name: 'mode', options: %w[north south], description: 'Which direction are you going?' }
      ],
      [
        { name: 'sandbarge', regex: /sandbarge/i, description: 'The sand barge between Hvaral, Oasis, and Muspari' },
        { name: 'start_location', options: %w[hvaral oasis muspari], description: 'Where are you coming from?' },
        { name: 'end_location', options: %w[hvaral oasis muspari], description: 'Where do you need to get to?' }
      ],
      [
        { name: 'desert', regex: /desert/i, description: 'Hidasharon Desert on Mriss for hunting armadillos' },
        { name: 'mode', options: %w[adult juvenile elder oasis exit], description: 'Where to?' }
      ],
      [
        { name: 'velaka', regex: /velaka/i, description: 'The Velaka desert, containing zombie nomads and westanuryn.' },
        { name: 'mode', options: %w[nomads westanuryn slavers exit], description: 'Where to?' }
      ],
      [
        { name: 'ferry', regex: /ferry/i, description: 'Ferry between Leth Deriel and the Crossing' },
        { name: 'mode', options: %w[leth crossing], description: 'Which town are you going to?' }
      ],
      [
        { name: 'ferry1', regex: /ferry1/i, description: 'Ferry between Hibarnhvidar and the Ain Ghazal' },
        { name: 'mode', options: %w[hibarnhvidar ainghazal], description: 'Which town are you going to?' }
      ],
      [
        { name: 'lang_barge', regex: /lang/, description: 'Barge between Langenfirth and Riverhaven' }
      ],
      [
        { name: 'shard_gates', regex: /shard/i, description: 'Use the Shard gates' }
      ],
      [
        { name: 'thief_guild', regex: /thief_guild/i, description: 'Enter the Shard thieves guild' }
      ],
      [
        { name: 'abyss', regex: /abyss/i, description: 'Use the Cleric entrance to the Abyss; requires Rezz' }
      ],
      [
        { name: 'haven_throne', regex: /haven_throne/i, description: 'Ferry between Riverhaven and Throne City' }
      ],
      [
        { name: 'hvaral_passport', regex: /hvaral_passport/i, description: 'Handles the gate between Hvaral and Muspari' }
      ],
      [
        { name: 'brocket_young', regex: /brocket_young/i, description: 'Enter the young brocket deer hunting area.' },
        { name: 'mode', options: %w[enter exit], description: 'Enter or exit?' }
      ],
      [
        { name: 'brocket_mid', regex: /brocket_mid/i, description: 'Enter the mid brocket deer hunting area.' },
        { name: 'mode', options: %w[enter exit], description: 'Enter or exit?' }
      ],
      [
        { name: 'brocket_elder', regex: /brocket_elder/i, description: 'Enter the elder brocket deer hunting area.' },
        { name: 'mode', options: %w[enter exit], description: 'Enter or exit?' }
      ],
      [
        { name: 'hara_polo', regex: /hara_polo/i, description: 'Traverse Polo Maze.' },
        { name: 'mode', options: %w[up down hunt], description: 'Up Down or Hunt?' }
      ],
      [
        { name: 'jolas', regex: /jolas/i, description: "Ride The Jolas between Hara'jaal and Mer'Kresh." },
        { name: 'mode', options: %w[harajaal merkresh], description: "harajaal or merkresh?  Can be started while aboard the Jolas." }
      ],
      [
        { name: 'currach', regex: /currach/i, description: "Row a currach between Halasa Temple and Aesry Surlaenis'a." },
        { name: 'mode', options: %w[halasa aesry], description: "halasa or aesry?" }
      ],
      [
        { name: 'galley', regex: /galley/i, description: "Take the M'riss-Mer'Kresh galley." },
        { name: 'mode', options: %w[mriss merkresh], description: "mriss or merkresh?  Can also be started on the galley."  }
      ]  
    ]

    args = parse_args(arg_definitions)

    pause

    if args.wilds
      wilds(args.mode)
    elsif args.oshu_manor
      oshu_manor(args.mode)
    elsif args.faldesu
      faldesu(args.mode)
    elsif args.zaulfang
      zaulfang(args.mode)
    elsif args.gate_of_souls
      gate_of_souls(args.mode)
    elsif args.segoltha
      segoltha(args.mode)
    elsif args.crocs
      croc_swamp(args.mode)
    elsif args.ways
      astral_walk(args.mode)
    elsif args.mammoth
      take_mammoth(args.mode)
    elsif args.iceroad
      iceroad(args.mode)
    elsif args.basalt
      take_crawling_plague(args.mode)
    elsif args.balloon
      take_balloon(args.mode)
    elsif args.dirigible
      take_dirigible(args.mode)
    elsif args.airship
      take_airship_muspari
    elsif args.therenropebridge
      take_theren_rope_bridge(args.mode)
    elsif args.gondola
      ride_gondola(args.mode)
    elsif args.sandbarge
      take_sandbarge(args.start_location, args.end_location)
    elsif args.desert
      desert(args.mode)
    elsif args.velaka
      velaka_desert(args.mode)
    elsif args.ferry
      take_xing_ferry(args.mode)
    elsif args.ferry1
      take_ain_ghazal_ferry(args.mode)
    elsif args.abyss
      abyss_enter
    elsif args.lang_barge
      take_rh_lang_barge
    elsif args.shard_gates
      use_shard_gates
    elsif args.thief_guild
      enter_thief_guild
    elsif args.haven_throne
      take_haven_throne_ferry
    elsif args.hvaral_passport
      hvaral_passport
    elsif args.brocket_young
      brocket_young(args.mode)
    elsif args.brocket_mid
      brocket_mid(args.mode)
    elsif args.brocket_elder
      brocket_elder(args.mode)
    elsif args.hara_polo
      hara_polo(args.mode)
    elsif args.jolas
      jolas(args.mode)
    elsif args.currach
      currach(args.mode)
    elsif args.galley
      take_m_m_galley(args.mode)
    end
  end

  private

  def use_flying_mount(type, mode, speed = 'fly')
    mode = mode.downcase
    case mode
    when 'mount'
      bput("get my #{type}", /You get/, /You pick up/, /You are already holding/, /What were you referring/)
      case type
      when /broom|dirigible/i
        case bput("mount my #{type}", /You mount your/, /You are already mounted/, /What were you referring/)
        when /What were you referring/
          message("Can't mount your #{type}, where is it?")
          exit
        end
        bput("command #{type} to #{speed}", /You command your/)
      when /carpet|rug/i
        bput(right_hand == type ? "lower ground right" : "lower ground left", /You lower/, /But you aren't holding/)
        bput("unroll #{type}", /You carefully unroll/, /You can't unroll/, /What were you referring/)
        case bput("mount #{type}", /You step onto your .* which comes to life and slowly raises up off of the ground/, /You are already mounted/, /What were you referring/)
        when /What were you referring/
          message("Can't mount your #{type}, where is it?")
          exit
        end
        bput("command #{type} to #{speed}", /You command your/)
      else
        message("#{type} is not a valid type of flying mount.")
        exit
      end
    when 'dismount'
      case type
      when /broom|dirigible/i
        bput('dismount', /Your .* floats down to the ground/, /You climb off/)
        EquipmentManager.new.empty_hands
      when /carpet|rug/i
        bput('dismount', /Your .* floats down to the ground/, /You climb off/)
        bput("roll #{type}", /You roll up/, /You can't roll/)
        bput("stow my #{type}", /You put/, /You pick up/, /Stow what?/)
      else
        message("#{type} is not a valid type of flying mount.")
        exit
      end
    end
  end

  def take_m_m_galley(mode)
    unless [6555, 6656].include?(Room.current.id) || ["[[The Galley Cercorim]]","[[The Galley Sanegazat]]" ].include?(DRRoom.title)
      echo 'You are not at the galley docks, or on the galley.'
      return
    end
    
    #if you're on the mer'kresh side, check for money (no bank in m'riss.  you're screwed without funds)
    if (Room.current.id == 6555)
      if wealth("Mer'Kresh") < 120  #enough to go over and back 2x
        echo('Get money you slob!')
        return unless get_fare?(300, "Mer'Kresh", 6555)
      end
    end

    loop do
      echo 'at top of loop'
      #at your destination
      if (Room.current.id == 6555 && mode == 'merkresh') || (Room.current.id == 6656 && mode == 'mriss')
        echo "You're there."
        exit
      
      #Not there, but at the transport waiting room
      elsif Room.current.id == 6555 || Room.current.id == 6656
        echo 'waiting for transport'
        hide? unless DRRoom.room_objs.find {|obj| obj =~ /the galley (Sanegazat|Cercorim)/}
        pause 1 until DRRoom.room_objs.find {|obj| obj =~ /the galley (Sanegazat|Cercorim)/}
        case bput('go galley','You hand him your lirums and climb aboard', 'Come back when you can afford the fare','The galley has just left the harbor','You look around in vain for the')
        when 'The galley has just left the harbor'
          pause 1 until !DRRoom.room_objs.find {|obj| obj =~ /the galley (Sanegazat|Cercorim)/}
        when 'Come back when you can afford the fare'
          echo('Get money you slob!')
          return
        when 'You hand him your lirums and climb aboard'
          pause 1 #allow catch up
        end
      
      #Not there, but on the transport
      elsif ["[[The Galley Cercorim]]","[[The Galley Sanegazat]]"].include?(DRRoom.title)
        echo 'waiting for dock'
        if mode == 'merkresh'
          echo "On transport, headed to merkresh"
          hide? unless DRRoom.room_objs.find {|obj| obj =~ /Mer'Kresh dock/}
          echo "On transport, waiting for merkresh dock"
          pause 1 until DRRoom.room_objs.find {|obj| obj =~ /Mer'Kresh dock/}
          echo "On transport, found merkresh dock!"
          case bput('go dock','Obvious paths:','The galley has just pulled away from the dock','You see no dock','What were you referring to')
          when 'The galley has just pulled away from the dock','You see no dock','What were you referring to'
            pause 1 until !DRRoom.room_objs.find {|obj| obj =~ /Mer'Kresh dock/}
          end
        elsif mode == 'mriss'
          echo "on transport, headed to mriss"
          hide? unless DRRoom.room_objs.find {|obj| obj =~ /M'Riss dock/}
          echo "On transport, waiting for mriss dock"
          pause 1 until DRRoom.room_objs.find {|obj| obj =~ /M'Riss dock/}
          echo "On transport, found mriss dock!"
          case bput('go dock','Obvious paths:','The galley has just pulled away from the dock','You see no dock','What were you referring to')
          when 'The galley has just pulled away from the dock','You see no dock','What were you referring to'
            pause 1 until !DRRoom.room_objs.find {|obj| obj =~ /M'Riss dock/}
          end
        end
      end
    end
  end

  def currach(mode)
    if (mode.include?('aesry') && [5555, 5557, 5558].include?(Room.current.id))
      echo "You're already there silly!"
      exit
    elsif (mode.include?('halasa') && [15863].include?(Room.current.id))
      echo "You're already there silly!"
      exit
    elsif mode == 'aesry'
      row_direction = 'pier'
    elsif mode == 'halasa'
      row_direction = 'rock'
    else
      echo("Unrecognized argument: #{mode}")
      exit
    end

    if [5555, 5557, 5558, 15863].include?(Room.current.id)
      move "go currach"
      bput('get oars', 'You grab hold of the oars', 'But you already have a firm grip on the oars', 'What were you referring to',  "You can't do that right now")
      bput('untie currach', 'You untie the', "But it's not tied to anything!", 'What were you referring to',  "You can't do that right now")
    end

    loop do
      if bput("tie currach to #{row_direction}", "isn't close enough!", 'You pull at the oars', 'is already moored') == 'is already moored'
        fix_standing
        move "go #{row_direction}"
        exit
      else
        bput("row #{row_direction}", 'You pull strongly', 'What were you referring to',  "You can't do that right now")
      end
    end
  end

  def jolas(mode)
    #Boat has multiple rooms: 15450, 15451, 15452, 15453, 15454
    unless [15253, 6542, 15450, 15451, 15452, 15453, 15454].include?(Room.current.id)
      echo "You are not at the correct dock to ride The Jolas."
      return
    end

    if (mode.include?('merkresh') && Room.current.id == 6542) || (mode.include?('harajaal') && Room.current.id == 15253)
      echo "You're already there silly!"
      exit
    elsif (mode.include?('merkresh') && Room.current.id == 15253) || (mode.include?('harajaal') && Room.current.id == 6542)
      hide? unless DRRoom.room_objs.find { |x| x =~ /The Jolas/ }
      pause 1 until DRRoom.room_objs.find { |x| x =~ /The Jolas/ }
      bput('go Jolas', 'You climb','What were you referring')
      waitfor 'The captain barks the order to tie off the Jolas to the docks'
      walk_to(15450) if Room.current.id != 15450
      if DRRoom.room_objs.include?('Sumilo Dock') && mode.include?('harajaal')
        move 'go dock'
        exit
      elsif DRRoom.room_objs.include?('Wharf End') && mode.include?('merkresh')
        move 'go end'
        exit
      else
        jolas(mode)
      end
    end
  end

  def hara_polo(mode)
    hara_polo_direction(mode)

    if mode.include?('up')
      move 'climb slope' if Room.current.id == 11411
      move 'ne' until DRRoom.room_objs.include?('rock')
      move 's'
    elsif mode.include?('down')
      move 'n' if Room.current.id == 11416
      move 'ne' until DRRoom.room_objs.include?('slope')
      move 'climb slope'
    else
      find_room_list(%w[ne ne ne])
    end
  end

  def hara_polo_direction(mode)
    if mode == /up/i && (Room.current.id != 11411 || Room.current.id != 11412)
      echo('Going up the maze to the Enclave must be started from 11411 or 11412.')
      exit
    elsif mode == /down/i && (Room.current.id != 11416 || Room.current.id != 11412)
      echo('Going down the maze towards the cliff and boat to Ratha must be started from 11416 or 11412.')
      exit
    elsif mode == /hunt/i && (Room.current.id != 11416 || Room.current.id != 11412)
      echo('Going hunting must begin in room 11416 or 11412.')
      exit
    else
      move 'n' if mode.include?('hunt')
    end
  end

  def enter_brocket(mode)
    if mode !~ /exit/i && Room.current.id != 3462
      echo('Brocket deer entrance must be started from 3462.')
      exit
    end

    move 'climb fence' if mode.include?('enter')
  end

  def brocket_young(mode)
    enter_brocket(mode)

    if mode.include?('enter')
      find_room_list(%w[w w w])
    else
      move 'e' until DRRoom.room_objs.include?('log fence')
      move 'climb fence'
    end
  end

  def brocket_mid(mode)
    enter_brocket(mode)

    if mode.include?('enter')
      move 'w' until DRRoom.room_objs.include?('gentle hill')
      move 'climb hill'
      find_room_list(%w[e e e])
    else
      move 'w' until DRRoom.room_objs.include?('gentle hill')
      move 'climb hill'
      move 'e' until DRRoom.room_objs.include?('log fence')
      move 'climb fence'
    end
  end

  def brocket_elder(mode)
    enter_brocket(mode)

    if mode.include?('enter')
      move 'w' until DRRoom.room_objs.include?('gentle hill')
      move 'climb hill'
      move 'e' until DRRoom.room_objs.include?('rolling hill')
      move 'climb hill'
      find_room_list(%w[w w w])
    else
      move 'e' until DRRoom.room_objs.include?('rolling hill')
      move 'climb hill'
      move 'w' until DRRoom.room_objs.include?('gentle hill')
      move 'climb hill'
      move 'e' until DRRoom.room_objs.include?('log fence')
      move 'climb fence'
    end
  end

  def do_map_move(movement)
    if movement.is_a?(StringProc) || movement.is_a?(Proc)
      movement.call
    else
      move movement
    end
  end

  def manual_go2(goal_room)
    return if Room.current.id == goal_room
    path = Map.findpath(Room.current.id, Map[goal_room])
    path.each { |step| do_map_move(Room.current.wayto[step.to_s]) }
    do_map_move(Room.current.wayto[goal_room.to_s])
  end

  def search
    fput('search')
    pause
    waitrt?
    retreat
  end

  def search_path(pathname, visible = true, movetype = 'go')
    if visible
      loop do
        loop do
          search
          # 'other stuff' indicates the room is full - any paths could be rolled up into that collection
          break if DRRoom.room_objs.find { |obj| obj.include?(pathname) || obj.include?('other stuff') }
        end
        break if move "#{movetype} #{pathname}"
        pause
      end
      pause
    else
      search
      until move "#{movetype} #{pathname}"
        pause
        search
      end
    end
  end

  def move_direction?(dir_priority, force_match = nil)
    if choice = dir_priority.find { |dir| XMLData.room_exits.include?(dir) }
      $turns_since_bad = 0
      move choice
      true
    elsif force_match
      dir_priority.each do |dir|
        if force_match.find { |msg| XMLData.room_description.include?(msg) }
          return false
        end
        move(dir)
        pause 0.5
        waitrt?
      end
      true
    elsif XMLData.room_exits.empty?
      # fog?
      move dir_priority[$turns_since_bad % dir_priority.size]
      $turns_since_bad += 1
      $turns_since_bad < 15
    else
      false
    end
  end

  def find_room_maze(valid_move = proc { |_| true }, error_rooms = {}, target = nil)
    loop do
      error_rooms[Room.current.id].call if error_rooms[Room.current.id]
      return if DRRoom.pcs.empty? && DRRoom.npcs.empty? && (target.nil? || XMLData.room_title.include?(target))
      return if !DRRoom.pcs.empty? && (DRRoom.pcs - UserVars.friends).empty? && DRRoom.pcs.size <= 2 && (target.nil? || XMLData.room_title.include?(target))
      exits = XMLData.room_exits.dup.shuffle
      exits = %w[nw n ne e se s sw w].shuffle if exits.empty?
      exits.rotate! until valid_move.call(exits.first)
      move exits.first
    end
  end

  def find_room_list(moves, min = 0)
    count = 0
    moves.each do |dir|
      count += 1
      break if DRRoom.pcs.empty? && DRRoom.npcs.empty? && count > min
      move dir
      pause 0.5
    end
  end

  def oshu_manor(mode)
    if mode !~ /exit/i && Room.current.id != 2317
      echo('Oshu manor script must be started from 2317')
      exit
    end
    case mode
    when /exit/i
      walk_to(2317)
    when /worms/i
      wait_for_script_to_complete('oshu_manor', ['worms'])
      find_room_list(%w[sw w w w w n n s s e s e s se ne e w n n ne])
    when /kartais/i
      wait_for_script_to_complete('oshu_manor', ['kartais'])
      find_room_list(%w[e e w w w n n n])
    end
  end

  def take_sandbarge(start_location, end_location)
    if start_location == end_location
      echo('You entered the same locations.')
      exit
    end

    case start_location # determines what room to find the barge
    when 'muspari'
      manual_go2(6872)
    when 'oasis'
      if end_location == 'hvaral'
        manual_go2(7578)
      elsif end_location == 'muspari'
        manual_go2(7579)
      end
    when 'hvaral'
      manual_go2(3766)
    end

    case end_location # determines how and when to exit the barge
    when 'muspari'
      port_type = 'platform'
      port_call = 'The sand barge pulls into dock'
    when 'oasis'
      port_type = 'oasis'
      port_call = 'The sand barge pulls up to a desert oasis'
    when 'hvaral'
      port_type = 'dock'
      port_call = 'The sand barge pulls into dock'
    end

    case bput('go barge', 'What were you referring to', "One of the barge's crew members watching", "You can't do that right now")
    when /What were you referring to/, /You can't do that right now/
      hide?
      waitfor 'A sand barge pulls'
      take_sandbarge(start_location, end_location)
    when /One of the barge's crew members watching/
      hide?
      waitfor port_call
      move("go #{port_type}")
    end
  end

  def desert_enter
    walk_to(12_581)
    move 'down'
  end

  def desert(mode)
    priority_directions = %w[northeast east north northwest south southeast west southwest]
    if mode !~ /exit/i && Room.current.id != 6760
      echo('Desert script must be started in 6760')
      exit
    end
    case mode
    when /oasis/
    loop do
      desert_enter
      path = %w[s ne ne s s ne e]
      path.each do |movement|
        if DRRoom.room_objs.include?('shimmering oasis')
          move 'go oasis'
          exit
        else
          move(movement)
        end
      end
      move 'go trail'
      path = %w[ne n ne n ne n n ne n ne n]
      path.each do |movement|
        if DRRoom.room_objs.include?('shimmering oasis')
          move 'go oasis'
          exit
        else
          move(movement)
        end
      end
      move 'go path'
      path = %w[sw e s s ne s se n ne ne ne]
      path.each do |movement|
        if DRRoom.room_objs.include?('shimmering oasis')
          move 'go oasis'
          exit
        else
          move(movement)
        end
      end
      move 'go trail'
      path = %w[n sw ne s sw n up n s s n n down n s s sw s]
      path.each do |movement|
        if DRRoom.room_objs.include?('shimmering oasis')
          move 'go oasis'
          exit
        else
          move(movement)
        end
      end
      path = %w[n ne up e s ne nw ne e nw]
      path.each do |movement|
        if DRRoom.room_objs.include?('shimmering oasis')
          move 'go oasis'
          exit
        else
          move(movement)
        end
      end
      move 'go road'
      end
    when /juvenile/
      desert_enter
      find_room_maze
    when /adult/
      desert_enter
      move_direction?(priority_directions) until DRRoom.room_objs.include?('faint trail that stretches towards a sand-filled valley')
      move 'go trail'
      find_room_maze
    when /elder/
      desert_enter
      move_direction?(priority_directions) until DRRoom.room_objs.include?('faint trail that stretches towards a sand-filled valley')
      move 'go trail'
      move_direction?(priority_directions) until DRRoom.room_objs.include?('faint path leading to some nearby dunes')
      move 'go path'
      find_room_maze
      exit
    when /exit/
      if XMLData.room_title.include?('Sanctuary') # Oasis
        release_invisibility
        bput('ask Sand Elf about desert', 'The Sand Elf laughs and glances at you playfully')
        fix_standing
        desert(mode)
      end
      if XMLData.room_title.include?('Sand Valley') # Adult Area
        move_direction?(priority_directions) until DRRoom.room_objs.include?('faint trail leading to some nearby dunes')
        move 'go trail'
        desert(mode)
      end
      if XMLData.room_title.include?('High Dunes') # Juvie Area or Elder
        move_direction?(priority_directions) until DRRoom.room_objs.include?('faint trail that stretches towards a sand-filled valley') || DRRoom.room_objs.include?('faint path that stretches towards a sand-filled valley')
        if DRRoom.room_objs.include?('faint trail that stretches towards a sand-filled valley')
        else
          move 'go path'
          desert(mode)
          exit
        end
        move 'south'
        move 'northeast'
        walk_to(6760)
      end
    end
  end

  def velaka_desert_enter
    walk_to(247)
    move 'go trail'
  end

  def velaka_desert(mode)
    case mode
    when /nomads/
      velaka_desert_enter
      wander_maze_until('high plateau', 'climb plateau')
    when /westanuryn/
      velaka_desert_enter
      find_room_maze
    when /slavers/
      velaka_desert_enter
      find_room_maze(proc { |_| true }, {}, 'Rock Circle')
    when /exit/
      unless XMLData.room_title.include?('Velaka Desert')
        echo 'This must be started in the Velaka Desert!'
        return
      end
      if XMLData.room_title.include?('Walk of Bones') # Nomad Area
        manual_go2(15_052)
        move 'climb trail'
        return velaka_desert(mode)
      else
        wander_maze_until('rocky trail', 'go trail')
      end
    end
  end

  def wilds(mode)
    if mode !~ /exit/i && Room.current.id != 7958
      echo('Wilds script must be started from 7958')
      exit
    end
    case mode
    when /exit/i
      wilds_leave
    when /leucro1/i
      wilds_enter
      find_room_maze(proc { |dir| !(XMLData.room_exits == %w[east south northwest] && dir == 'northwest') }, 7958 => proc { search_path('spot') }, 7957 => proc { move('east') })
    when /leucro2/i
      wilds_enter
      wilds_leucro_maze(true)
      find_room_list(%w[se s se sw sw sw w w w w s se], 4)
    when /geni/i
      wilds_enter
      wilds_leucro_maze(true)
      wilds_leucro_walk
      find_room_maze
    end
  end

  def wilds_enter
    search_path('spot')
  end

  def wilds_leucro_walk
    attempts = 0
    until XMLData.room_description.include?('small creatures still lurk beneath its surface -- perhaps following the remnant of an old, long unused trail.')
      unless move_direction?(%w[southeast south southwest west])
        move('southeast')
      end
      pause 0.5
      attempts += 1
      if attempts == 50
        echo 'Train your perception!'
        exit
      end
    end
    search_path('trail', false)
  end

  def wilds_leucro_maze(entering)
    if entering
      while move_direction?(%w[northeast east north southeast])
        pause 0.5
        break if DRRoom.room_objs.include?('tangled deadfall')
      end
      if Room.current.id == 7958
        move 'go spot'
        wilds_leucro_maze(entering)
        return
      end
      move 'go dead'
    else
      pause 0.5 while move_direction?(%w[northwest west north])
    end
  end

  def wilds_leave_trail
    pause 0.5 while move_direction?(%w[northeast north northwest east south], ['A fearsomely large black plant rests at the bottom of two slopes.  Its serpentine, multiple stems end in large red tubular openings, which exude a smell like a cross between donkey roadkill and flayed skunk'])
    move 'go dead'
  end

  def wilds_leave
    matches = [
      'It drips slowly into the undergrowth, creating a damp sludge that makes walking unpleasant and hazardous',
      'Several sets of yellow eyes stare out unblinkingly from the safety of oak tree limbs too high for even the largest creatures to reach.  The sound of softly fluttering wings drifts down',
      'A fearsomely large black plant rests at the bottom of two slopes.  Its serpentine, multiple stems end in large red tubular openings, which exude a smell like a cross between donkey roadkill and flayed skunk',
      'A lively brook once bubbled through the narrow gully, but time and drought have left only this cracked streambed as a reminder.'
    ]

    loop do
      pause 0.25 while move_direction?(%w[northwest west north northeast], matches)

      if XMLData.room_description.include?(matches[0])
        search_path('trail', false)
      elsif XMLData.room_description.include?(matches[1]) || XMLData.room_description.include?(matches[2])
        wilds_leave_trail
      else
        break
      end
    end
  end

  def faldesu(mode)
    flying_mount = get_settings.flying_mount
    unless mode =~ /haven|crossing/i
      echo 'You must specify haven or crossing for traversing the faldesu river'
      exit
    end

    if flying_mount
      swim_faldesu(mode =~ /haven/i)
      return
    end

    if UserVars.athletics >= 140
      unless UserVars.athletics >= 300
        EquipmentManager.new.empty_hands
        EquipmentManager.new.wear_equipment_set?('swimming')
      end
      swim_faldesu(mode =~ /haven/i)
      EquipmentManager.new.wear_equipment_set?('standard') unless UserVars.athletics >= 300
    else
      take_rh_ferry(mode =~ /haven/i)
    end
  end

  def iceroad(mode)
    unless mode =~ /shard|hibarnhvidar/i
      echo 'You must specify shard or hibarnhvidar for traversing the ice road'
      exit
    end

    path = mode == 'shard' ? $ICE_PATH_SHARD : $ICE_PATH_HIB

    if exists?('skates')
      EquipmentManager.new.empty_hands
      footwear = get_settings.footwear
      fput("remove #{footwear}") if footwear
      bput("stow my #{footwear}", 'You put') if footwear
      fput('get skates')
      fput('wear skates')
      path.each do |movement|
        move(movement)
      end
      fput('rem skates')
      fput('stow skates')
      bput("get my #{footwear}", 'You get') if footwear
      fput("wear #{footwear}") if footwear
    else
      path.each do |movement|
        move(movement)
        waitrt?
        collect('rock')
        waitrt?
      end
    end
  end

  def swim(dir)
    move dir
    pause
    waitrt?
  end

  def swim_faldesu(north)
    flying_mount = get_settings.flying_mount
    start = north ? 1375 : 473
    manual_go2(start)
    moveset = north ? %w[north northwest northeast] : %w[south southwest southeast]
    move 'dive river'
    if flying_mount
      use_flying_mount(flying_mount, 'mount')
      if north
        move n
        move nw
      else
        move s
        move sw
      end
      move 'go bridge'
      use_flying_mount(flying_mount, 'dismount')
      EquipmentManager.new.empty_hands
    else
      swim(moveset[0]) while XMLData.room_exits.include?(moveset[0])
      swim(moveset[1]) while XMLData.room_exits.include?('east')
      swim(moveset[2]) while XMLData.room_exits.include?(moveset[0])
      move 'climb bridge'
    end
  end

  def take_mammoth(mode)
    case mode
    when 'fang'
      id_to_mammoth = { 2239 => 'tall', 11_130 => 'sea' }
      closest_mammoth = sort_destinations(id_to_mammoth.keys).first
      manual_go2(closest_mammoth)
      mammoth_type = id_to_mammoth[closest_mammoth]
    when 'acen'
      manual_go2(8301)
      mammoth_type = 'tall'
    when 'ratha'
      manual_go2(8301)
      mammoth_type = 'sea'
    end
    case bput("join #{mammoth_type} mammoth", 'What were you referring to', 'You join the Merelew driver')
    when /What were you referring to/
      waitfor 'The waves along the waterline increase drastically', 'A watery trumpeting sound heralds the swift approach'
      take_mammoth(mode)
    when /You join the Merelew driver/
      waitfor 'The burly beast trumpets a series of watery blasts', 'Here we are, ladies and gentlemen'
    end
  end

  def take_crawling_plague(mode)
    case mode
    when 'island'
      manual_go2(12_282)
    when 'ratha'
      manual_go2(12_292)
    end
    case bput('join crawling plague', "You join the ship's captain", 'What were you referring to?')
    when /You join the ship's captain/
      hide?
      board_time = Time.now if UserVars.bescort_debug
      pause 1 until XMLData.room_title != '[[The Crawling Plague, Deck]]'
      echo "Trip time: #{Time.now - board_time} seconds" if UserVars.bescort_debug
    when /What were you referring to/
      hide?
      waitfor 'JOIN CRAWLING PLAGUE before it leaves if you would like to go'
      take_crawling_plague(mode)
    end
  end

  def take_dirigible(mode)
    case mode
    when 'aesry'
      manual_go2(12_862)
      if wealth('Shard') < DRStats.circle * 50
        echo('Get money you slob!')
        return unless get_fare?(DRStats.circle * 50, 'Shard', 12_862)
      end
    when 'shard'
      if wealth('Aesry') < DRStats.circle * 50
        echo('Get money you slob!')
        return unless get_fare?(DRStats.circle * 50, 'Aesry', 12_942)
      end
      manual_go2(12_942)
    end
    case bput('join dirigible', 'The Elothean aeromancer says, "Woah there', 'What were you referring to?')
    when /Elothean aeromancer/
      case bput('join dirigible', 'You hand over your funds and step closer', 'You reach your funds, but')
      when /closer/
        pause 5
        pause until XMLData.room_title != '[[Aboard the Dirigible, Gondola]]'
      else
        return
      end
    when /What were you referring to/
      waitfor 'JOIN CHARCOAL DIRIGIBLE'
      take_dirigible(mode)
    end
  end

  def take_airship_muspari
    case bput('join airship', 'You join a', 'What were you referring to?')
    when /You join a/
      pause 5
      pause until XMLData.room_title != '[[The Bardess\' Fete, Deck]]'
    when /What were you referring to/
      waitfor 'JOIN AIRSHIP'
      take_airship_muspari
    end
  end

  def take_balloon(mode)
    case mode
    when 'mriss'
      manual_go2(8793)
      if wealth('Therenborough') < DRStats.circle * 50
        echo('Get money you slob!')
        return unless get_fare?(DRStats.circle * 50, 'Therenborough', 8793)
      end
    when 'langenfirth'
      if wealth("Mer'Kresh") < DRStats.circle * 50
        echo('Get money you slob!')
        return unless get_fare?(DRStats.circle * 50, "Mer'Kresh", 8794)
      end
      manual_go2(8794)
    end
    case bput('join balloon', 'The Gnomish operator says, "Woah there', 'What were you referring to?')
    when /Gnomish operator /
      case bput('join balloon', 'You hand over your funds and step closer', 'You reach your funds, but')
      when /closer/
        pause 5
        pause until XMLData.room_title != '[[Aboard the Balloon, Gondola]]'
      else
        return
      end
    when /What were you referring to/
      waitfor 'JOIN GNOMISH BALLOON'
      take_balloon(mode)
    end
  end

  def take_rh_ferry(north)
    if north
      manual_go2(1385)
    else
      manual_go2(470)
    end
    case bput('go ferry', 'You .* climb aboard', 'Come back when you can afford the fare', 'not here', 'I could not find what you were referring to', 'stuck here until the next one arrives')
    when /not here/, /I could not find what you were referring to/i, /stuck here until the next one arrives/
      hide?
      waitfor 'pulls into the dock', 'pulls up to the dock'
      take_rh_ferry(north)
    when /climb aboard/
      hide?
      waitfor 'reaches the dock and its crew ties the ferry off'
      move('go dock')
    end
  end

  def zaulfang(mode)
    Flags.add('maze-reset', 'The noxious swamp gas takes its toll on your mind, and your surroundings seem to shift as you grow immensely dizzy')
    case mode
    when /enter/i
      unless Room.current.id == 8540
        echo('Must enter Zaulfang swamp from 8540')
        exit
      end
      move('go path')
      pause
      wander_maze_until('sickly tree that looms far above the swamp', 'climb tree')
    when /exit/i
      unless Room.current.id == 19_415
        echo('Must exit Zaulfang swamp from 19415')
        exit
      end
      move('down')
      pause
      wander_maze_until('curving path', 'go path')
    end
  end

  def wander_maze_until(target, exit_command)
    Flags.add('maze-reset', 'You can\'t go there')
    current_room = MazeRoom.new
    loop do
      if Flags['maze-reset']
        Flags.reset('maze-reset')
        result = bput('look', 'Obvious paths:.*').split(':').last.split(', ').first.delete('.')
        move(result)
        pause
        current_room = MazeRoom.new
      end

      if DRRoom.room_objs.include?(target)
        return if exit_command == nil
        unless move(exit_command)
          fix_standing
          wander_maze_until(target, exit_command)
        end
        return
      end
      current_room = current_room.wander
    end
  end

  def gate_of_souls(mode)
    Flags.add('maze-reset', 'Plumes of lava belch into the air, sending molten rock spraying about')
    case mode
    when /blasted/i
      unless Room.current.id == 1784
        echo('Must start at Gate of Souls, room number 1784')
        exit
      end
      gos_blasted_plains
      find_room_maze
    when /temple/i
      if Room.current.id == 1784
        gos_blasted_plains
        wander_maze_until('golden sandstone temple', 'go temple')
        manual_go2(13_625)
        find_room_list(%w[sw e e e se s sw w w w w nw n ne se s ne se n ne w nw])
      elsif XMLData.room_title.include?('The Fangs of Ushnish')
          wander_maze_until('steep cliff', 'climb cliff')
          manual_go2(13_625)
      else  
        echo('Must start at Gate of Souls, room number 1784, or within the Fangs of Ushnish Area')
        exit
      end
    when /fangs/i
      unless Room.current.id == 1784
        echo('Must start at Gate of Souls, room number 1784')
        exit
      end
      gos_blasted_plains
      wander_maze_until('golden sandstone temple', 'go temple')
      manual_go2(13_643)
      move('climb cliff')
      find_room_maze
    when /exit/i
      if XMLData.room_title.include?('The Fangs of Ushnish')
        wander_maze_until('steep cliff', 'climb cliff')
        gos_temple_leave
      end
      gos_temple_leave if XMLData.room_title.include?('Temple of Ushnish')
      gos_plains_leave if XMLData.room_title.include?('Blasted Plain')
      gos_tunnel if XMLData.room_title.include?('Before the Gate of Souls')
    when /fou/i
      if XMLData.room_title.include?('The Fangs of Ushnish')
        wander_maze_until('volcanic crevasse', nil)
      end
    end
  end

  def gos_blasted_plains
    push_boulder unless DRRoom.room_objs.include?('low tunnel')
    retreat
    gos_tunnel
    move('go field')
  end

  def push_boulder
    fix_standing
    fput('push boulder')
    case waitfor(/^At the bottom of the hollow/, /^You stop pushing/, /blocking all access to a low tunnel\.$/)
    when /^You stop pushing/, /blocking all access to a low tunnel\.$/
      push_boulder
    end
  end

  def gos_tunnel
    bput('kneel', 'You kneel down upon the ground', 'You are already kneeling')
    case bput('go tunnel', /^Wriggling on your stomach/, /^You are engaged/, /^What were you referring to/)
    when /^You are engaged/
      retreat
      return gos_tunnel
    when /^What were you referring to/
      push_boulder
      return gos_tunnel
    end
    waitfor /^After a seemingly interminable length of time/
    fix_standing
  end

  def gos_temple_leave
    manual_go2(13_159)
    move('go field')
    gos_plains_leave
  end

  def gos_plains_leave
    wander_maze_until('low cavern', 'go cavern')
    gos_tunnel
  end

  def segoltha(mode)
    flying_mount = get_settings.flying_mount
    EquipmentManager.new.empty_hands
    have_changed_gear = flying_mount ? false : EquipmentManager.new.wear_equipment_set?('swimming')
    move_count = 0
    if mode =~ /^n/i
      dir_of_travel = 'north'
      start_room = 19_373
    elsif mode =~ /^s/i
      dir_of_travel = 'south'
      start_room = 19_457
    elsif mode =~ /^w/i
      dir_of_travel = 'south'
      start_room = 15_888
    else
      echo('Must specify north or south for swimming the segoltha')
      exit
    end

    if flying_mount
      use_flying_mount(flying_mount, 'mount', 'skim')
      if dir_of_travel == 'south'
        move 'go bank'
        move 'west'
        move 'go river'
        move 'west'
      end
      move dir_of_travel
      move dir_of_travel
      if dir_of_travel == 'north'
        move 'east'
        move 'go bank'
        move 'east'
        move 'go slope'
      end
      use_flying_mount(flying_mount, 'dismount')
      return
    end

    unless start_room == Room.current.id
      echo("Must start bescort in room #{start_room} for traveling #{dir_of_travel}")
      exit
    end

    loop do
      waitrt?
      if XMLData.room_exits.length == 2 || XMLData.room_exits.length == 1
        move 'west'
        move_count -= 1
      elsif dir_of_travel == 'north' && move_count == 16 && UserVars.segoltha_shortcut == 'true'
        move 'east'
        break if Room.current.id == 15888
      elsif XMLData.room_exits.include?(dir_of_travel)
        move dir_of_travel
      elsif XMLData.room_exits.length == 0
        break if Room.current.id == 19373 && dir_of_travel == 'south'
        break if Room.current.id == 19457 && dir_of_travel == 'north'
        if !(move dir_of_travel)
          move 'west'
          move_count -= 1
        end
      else
        break
      end
      move_count += 1
    end
    EquipmentManager.new.wear_equipment_set?('standard') if have_changed_gear
  end

  def croc_swamp(mode)
    if mode == 'enter'
      unless Room.current.id == 1358
        echo('Must start bescort in room 1358 to enter the swamp')
        exit
      end
      move('nw')
      move('n')
      move('go reed')
      until DRRoom.pcs.empty? && DRRoom.npcs.empty?
        move(%w[w nw n ne e se s sw].sample)
      end
    else
      loop do
        if bput('study reed', 'Study what?', 'You see nothing unusual', 'could not find', 'but see nothing special.', 'You study the sky') == 'but see nothing special.'
          move('go reed')
          break
        end
        if DRRoom.room_objs.include?('ruined shack')
          move('w')
          move('nw')
        else
          move(%w[w nw n ne e se s sw].sample)
        end
      end
      while move_direction?(%w[south southeast])
      end
    end
  end

  def take_theren_rope_bridge(mode)
    theren_side_roomid = 8650
    rossman_side_roomid = 8637
    if mode == 'totheren'
      if Room.current.id != rossman_side_roomid
        echo('Must start on the south side of the rope bridge')
        exit
      end
      shuffle_direction = 'north'
      target_room = theren_side_roomid
    elsif mode == 'torossman'
      if Room.current.id != theren_side_roomid
        echo('Must start on the north side of the rope bridge')
        exit
      end
      shuffle_direction = 'south'
      target_room = rossman_side_roomid
    else
      echo("Unrecognized argument: #{mode}")
      exit
    end

    start_room = Room.current.id
    Flags.add('rope_wait', 'finally arriving on this side', 'finally reaching the far side')
    while Room.current.id == start_room
      retreat
      Flags.reset('rope_wait') # avoiding race conditions
      case bput('climb rope', 'Roundtime', 'is already on the rope', 'You climb onto a', 'You are engaged', 'You can\'t possibly manage to cross the rope bridge while holding')
      when 'You can\'t possibly manage to cross the rope bridge while holding'
        fput('stow right') if checkright
        fput('stow left') if checkleft
      when 'is already on the rope'
        sleep(0.1) until Flags['rope_wait']
        Flags.reset('rope_wait')
      else
        sleep(2)
        waitrt?
      end
    end

    start_time = Time.now
    until Room.current.id == target_room || Time.now - start_time > 300
      bput("shuffle #{shuffle_direction}", 'Roundtime')
      sleep(3)
      waitrt?
    end
    return if Time.now - start_time <= 300

    3.times do
      beep
      sleep(0.5)
    end
    echo('ROPE BRIDGE TRIP TIMEOUT! This has taken too long. Something is wrong! Fix it!')
    exit
  end

  def abyss_enter
    unless Room.current.id == 8142
      echo('Abyss entrance script must be started from 8142')
      exit
    end
    release_cyclics
    unless cast_spell({ 'abbrev' => 'rezz',
                        'mana' => 5,
                        'cyclic' => true }, get_settings)
      echo('Failed to cast Resurrection! Try again or use the puzzle to enter.')
      exit
    end
    move('go spirits')
    release_cyclics
  end

  def power_walk(pattern)
    fput 'exit' if dead? || Flags['ap-danger']
    if Flags['harness-check']
      harness_mana([20]) unless Flags['harness-check'][1] == 'effortlessly'
      Flags.reset('harness-check')
    end
    result = bput('pow', pattern)
    result =~ pattern
    waitrt
    return if result.eql?('You are already at the end of the conduit.')
    if Flags['pattern-shift']
      Flags.reset('pattern-shift')
    else
      Flags.reset('walking-circles')
      move Regexp.last_match[:direction]
      # If you only walk in circles then you failed to move, try again.
      if Flags['walking-circles']
        power_walk(pattern)
      end
    end
  end

  def know_shard?(shard_name, shard_list)
    return true if UserVars.known_shards.include?(shard_name)
    bput('recall heavens grazhir', shard_name, 'Roundtime')
    lines = reget(30).map(&:strip)
    UserVars.known_shards = lines & shard_list
    UserVars.known_shards.include?(shard_name)
  end

  def focus_shard(name)
    stow_hands
    bput("focus #{name}", 'Roundtime', 'You move into the chaotic tides of energy')
  end

  def open_gate(shard, entering_ap)
    Flags.reset('gate-failure')
    release_cyclics
    unless prepare?('mg', 5)
      echo 'You may need to move to another room'
      exit
    end
    if entering_ap
      focus_shard(shard) if DRStats.circle < 100
      harness_mana([20, 20, 20])
      waitcastrt?
      if DRStats.circle > 99
        unless cast?('cast grazhir')
          echo 'You may need to move to another room'
          fput('release mana')
          exit
        end
      else
        cast?("cast #{shard}")
      end
    else
      focus_shard(shard)
      waitcastrt?
      cast?("cast #{shard}")
    end
    pause 0.25
    open_gate(shard, entering_ap) if Flags['gate-failure']
  end

  def astral_walk(mode)
    Flags.add('harness-check', /You (.*) maintain your place among the shifting streams of mana\./)
    Flags.add('pattern-shift', 'A wave of rippling air sweeps through the conduit!  The streams of mana writhe violently before settling into new patterns')
    Flags.add('gate-failure', 'With supreme effort, you are able to bring the spell to an end without harm.')
    Flags.add('ap-danger', "Unlike most astral phenomena, the static does not go away after a few moments. In fact, it's getting stronger. Closer.")
    Flags.add('walking-circles', "You end up walking in circles")

    room_id_to_shard = {
      9999 => "Asharshpar'i",
      607 => 'Rolagi',
      2493 => 'Marendin',
      306 => 'Taniendar',
      3002 => 'Mintais',
      3105 => 'Dinegavren',
      4542 => 'Tamigen',
      5050 => 'Erekinzil',
      6867 => 'Auilusi',
      8302 => 'Vellano',
      3777 => "Dor'na'torna",
      287 => 'Tabelrem',
      6991 => 'Besoge'
    }

    mode_to_shard = {
      'shard' => 'Marendin',
      'crossing' => 'Rolagi',
      'leth' => "Asharshpar'i",
      'theren' => 'Dinegavren',
      'throne' => 'Mintais',
      'raven' => 'Tamigen',
      'riverhaven' => 'Taniendar',
      'taisgath' => 'Erekinzil',
      'aesry' => 'Auilusi',
      'fang' => 'Vellano',
      'muspari' => 'Tabelrem',
      'steppes' => "Dor'na'torna",
      'merkresh' => 'Besoge'
    }

    mode_to_pillar_roomid = {
      'shard' => 9806,
      'merkresh' => 9806,
      'crossing' => 9764,
      'muspari' => 9764,
      'aesry' => 9807,
      'steppes' => 9807,
      'fang' => 9805,
      'leth' => 9803,
      'raven' => 9803,
      'theren' => 9762,
      'riverhaven' => 9762,
      'throne' => 9808,
      'taisgath' => 9808
    }

    direction_to_pattern = {
      'center' => /the microcosm is to the (?<direction>.*)\.$/,
      'exit' => /You believe the end of the conduit lies (?<direction>.*)\.$|^You are already at the end of the conduit\.$/
    }

    destination_shard = mode_to_shard[mode]
    unless know_shard?(destination_shard, mode_to_shard.values)
      echo 'You dont know that shard!'
      exit
    end

    source_shard = room_id_to_shard[Room.current.id]
    unless source_shard || DRStats.circle > 99
      echo 'You are not in a room with a Grazhir shard.'
      exit
    end
    open_gate(source_shard, true)
    pause 0.25 until XMLData.room_exits.empty?
    power_walk(direction_to_pattern['center']) while XMLData.room_exits.empty?
    walk_to mode_to_pillar_roomid[mode]
    focus_shard(destination_shard)
    while DRRoom.room_objs.empty?
      power_walk(direction_to_pattern['exit'])
      focus_shard(destination_shard) unless XMLData.room_exits.empty?
    end
    open_gate(destination_shard, false)
    fput('rel mana')
  end

  def ride_gondola(mode)
    case bput('go gondola', 'There is no wooden gondola here', 'Gondola, Cab')
    when /no wooden gondola here/i
      hide?
      waitfor 'The gondola stops on the platform and the door silently swings open'
      ride_gondola(mode)
    when /Gondola, Cab/
      move mode
      hide?
      waitfor 'With a soft bump, the gondola comes to a stop at its destination'
      move 'out'
    end
  end

  def take_xing_ferry(mode)
    unless [1904, 957].include?(Room.current.id)
      echo 'You are not at the ferry docks'
      return
    end

    if UserVars.citizenship != 'Zoluren' && wealth('Crossing') < 35
      echo('Get money you slob!')
      return unless Room.current.id == 1904 ? get_fare?(35, 'Leth Deriel', 1904) : get_fare?(70, 'Crossing', 957)
    end

    hide? unless DRRoom.room_objs.find { |x| x =~ /the ferry/ }
    pause 1 until DRRoom.room_objs.find { |x| x =~ /the ferry/ }

    case bput('go ferry', 'The Captain gives you a little nod', 'You hand him', 'The ferry has just pulled away from the dock', 'There is no ferry here to go aboard', 'Come back when you can afford the fare')
    when 'You hand him', 'The Captain gives you a little nod'
      hide?
      waitfor 'reaches the dock and its crew ties the ferry off'
      move 'go dock'
    when 'The ferry has just pulled away from the dock', 'There is no ferry here to go aboard'
      pause 1 while DRRoom.room_objs.find { |x| x =~ /the ferry/ }
      take_xing_ferry(mode)
    when 'Come back when you can afford the fare'
      echo('Your fare has mysteriously disappeared!')
      return
    end
  end

  def take_ain_ghazal_ferry(mode)
    unless [3986, 11_027].include?(Room.current.id)
      echo 'You are not at the ferry docks'
      return
    end

    if wealth('Shard') < 31
      echo('Get money you slob!')
      return unless Room.current.id == 3986 ? get_fare?(62, 'Hibarnhvidar', 3986) : false
    end

    hide? unless DRRoom.room_objs.find { |x| x =~ /Damaris. Kiss|Evening Star/ }
    echo(DRRoom.room_objs) if UserVars.bescort_debug
    pause 1 until DRRoom.room_objs.find { |x| x =~ /Damaris. Kiss|Evening Star/ }

    case bput('go ferry', 'You hand him', 'The ferry has just pulled away from the dock', 'is steadily approaching', 'Come back when you can afford the fare', 'Sorry, but we cannot take any more passengers', 'You see that the')
    when 'You hand him'
      hide?
      waitfor 'You come to a very soft stop'
      move 'go dock'
    when 'is steadily approaching', 'You see that the', 'The ferry has just pulled away from the dock', 'Sorry, but we cannot take any more passengers'
      waitfor 'comes to an easy landing at the dock and the crew quickly begin to unload the supplies they brought across the river while the passengers make their way off as best they can.'
      take_ain_ghazal_ferry(mode)
    when 'Come back when you can afford the fare'
      echo('Your fare has mysteriously disappeared!')
      return
    end
  end

  def take_rh_lang_barge
    unless [466, 50_948, 3434].include?(Room.current.id)
      echo 'You are not at the ferry docks'
      return
    end

    if wealth('Riverhaven') < 300
      echo('Get money you slob!')
      room = Room.current.id
      return unless room == 3434 ? get_fare?(300, 'Therenborough', room) : get_fare?(300, 'Riverhaven', room)
    end

    hide? unless DRRoom.room_objs.find { |x| x =~ /the barge/ }
    pause 1 until DRRoom.room_objs.find { |x| x =~ /the barge/ }

    case bput('go barge', "One of the barge's crew members stops you and requests a transportation fee of 65 lirums as you board the craft", 'You hand him', "The barge .* isn't docked, so you're stuck here until the next one arrives", 'The barge .* has just pulled away from the dock', 'There is no ferry here to go aboard', 'Come back when you can afford the fare')
    when 'You hand him', "One of the barge's crew members stops you and requests a transportation fee of 65 lirums as you board the craft"
      hide?
      waitfor 'reaches its dock and its crew ties the barge off'
      if DRRoom.room_objs.find { |x| x =~ /Langenfirth wharf/ }
        move 'go wharf'
      else
        move 'go pier'
      end
    when /The barge .* has just pulled away from the dock/, /The barge .* isn't docked, so you're stuck here until the next one arrives/
      pause 1 while DRRoom.room_objs.find { |x| x =~ /the barge/ }
      take_rh_lang_barge
    when 'Come back when you can afford the fare'
      echo('Your fare has mysteriously disappeared!')
      return
    end
  end

  def take_haven_throne_ferry
    unless [452, 3084].include?(Room.current.id)
      echo 'You are not at the ferry docks'
      return
    end

    if wealth('Riverhaven') < 300
      echo('Get money you slob!')
      return unless Room.current.id == 452 ? get_fare?(300, 'Riverhaven', 452) : get_fare?(300, 'Throne City', 3084)
    end

    if DRRoom.room_objs.find { |x| x =~ /the barge Imperial Glory/ }
      case bput('go glory', "One of the barge's crew members stops you and requests a transportation fee of 120 Lirums as you board the craft", 'You hand him', 'What were you referring to', "You can't do that", 'Come back when you can afford the fare')
      when 'You hand him', "One of the barge's crew members stops you and requests a transportation fee of 120 Lirums as you board the craft"
        hide?
        waitfor 'pulls into dock and its crew quickly ties the barge off'

        if DRRoom.room_objs.find { |x| x =~ /covered stone dock|salt yard dock/ }
          move 'go dock'
        end
      when /What were you referring to/, /You can't do that/
        hide? unless DRRoom.room_objs.find { |x| x =~ /the barge Imperial Glory|the barge Riverhawk/ }
        echo('Waiting for a barge to show up... ')
        hide?
        waitfor 'A barge pulls into the dock'
        take_haven_throne_ferry
      when 'Come back when you can afford the fare'
        echo('Your fare has mysteriously disappeared!')
        return
      end
    elsif DRRoom.room_objs.find { |x| x =~ /the barge Riverhawk/ }
      case bput('go riverhawk', "One of the barge's crew members stops you and requests a transportation fee of 120 Lirums as you board the craft", 'You hand him', 'What were you referring to', "You can't do that", 'Come back when you can afford the fare')
      when 'You hand him', "One of the barge's crew members stops you and requests a transportation fee of 120 Lirums as you board the craft"
        hide?
        waitfor 'pulls into dock and its crew quickly ties the barge off'

        if DRRoom.room_objs.find { |x| x =~ /covered stone dock|salt yard dock/ }
          move 'go dock'
        end
      when /What were you referring to/, /You can't do that/
        hide? unless DRRoom.room_objs.find { |x| x =~ /the barge Imperial Glory|the barge Riverhawk/ }
        echo('Waiting for a barge to show up... ')
        hide?
        waitfor 'A barge pulls into the dock'
        take_haven_throne_ferry
      when 'Come back when you can afford the fare'
        echo('Your fare has mysteriously disappeared!')
        return
      end
    else
      hide? unless DRRoom.room_objs.find { |x| x =~ /the barge Imperial Glory|the barge Riverhawk/ }
      echo('Waiting for a barge to show up... ')
      hide?
      waitfor 'A barge pulls into the dock'
      take_haven_throne_ferry
    end
  end

  def hvaral_passport
    case bput('get my passport', 'Realizing your passport has expired', 'You get', 'You are already', 'What were you', 'You pick up')
    when 'Realizing your passport has expired', 'What were you'
      manual_go2(3632)
      Flags.add('bescort-dustroad', 'Just when it seems you will never reach')
      move 'e'
      pause 1 until Flags['bescort-dustroad']
      Flags.reset('bescort-dustroad')
      pause 2
      manual_go2(3147)
      bput('ask licenser about passport', 'The licenser takes', 'Having a passport will allow')
      bput('ask licenser about passport', 'The licenser takes', 'Having a passport will allow')
      bput('stow passport', 'You put')
      manual_go2(3631)
      move 'w'
      pause 1 until Flags['bescort-dustroad']
      pause 2
      Flags.delete('bescort-dustroad')
      manual_go2(3698)
      bput('get my passport', 'Realizing your passport has expired', 'You get', 'You are already', 'What were you', 'You pick up')
    end
    move 'go gate'
    bput('stow passport', 'You put')
  end

  def enter_thief_guild
    password = get_settings.shard_thief_password
    bput('knock', 'You knock on the door')
    bput("say #{password}", 'You lean towards the doorway')
    move 'go door'
  end

  def use_shard_gates
    gate_rooms = [2640, 2658, 2807, 2525, 6452, 2516]
    unless gate_rooms.include?(Room.current.id)
      echo 'You are not at the Shard gates'
      return
    end
    Flags.add('bescort-ur-a-criminal', 'a wanted criminal')
    case bput('go gate', 'You pass', 'KNOCK', 'errant shadow')
    when 'KNOCK'
      if Flags['bescort-ur-a-criminal']
        # HACK: This turns off gate access until you log out. A better solution is desired
        Room.current.timeto[Room.current.timeto.keys.find { |room| gate_rooms.to_s.include?(room) }] = nil
        return
      end
      release_invisibility
      bput('knock gate', 'You knock')
    end
  end

  def get_fare?(amount, town, room)
    return false unless get_settings.bescort_fare_handling
    settings = get_settings
    town_data = get_data('town')
    echo 'GETTING MONEY, YOU SLOB.'
    echo "Heading to #{town} for public transportation fare"
    pause 1
    manual_go2(get_data('town')[town]['deposit']['id'])
    bput('JUSTICE', 'After assessing', 'lawless and unsafe')
    result = reget(5, 'You are also fairly sure that the people are convinced')
    if result
      echo 'You might be a necromancer!  Get some money manually!'
      return false
    end
    settings.hometown = town
    succeeded = false
    DRCM.minimize_coins(amount).each { |each_amount| succeeded = DRCM.get_money_from_bank(each_amount, settings) }
    echo "Put some fare money in the #{town} bank!" unless succeeded
    manual_go2(room)
    succeeded
  end

  def hide?
    return false if get_settings.bescort_hide == false
    DRC.hide?
  end
end

before_dying do
  Flags.delete('bescort-ur-a-criminal')
  Flags.delete('bescort-dustroad')
  Flags.delete('maze-reset')
  Flags.delete('rope_wait')
  Flags.delete('harness-check')
  Flags.delete('pattern-shift')
  Flags.delete('gate-failure')
  Flags.delete('ap-danger')
  Flags.delete('walking-circles')
end

Bescort.new
