=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mine
=end

custom_require.call(%w[common equipmanager events common-travel])

class Mine
  include DRC
  include DRCT

  def initialize
    settings = get_settings
    @equipment_manager = EquipmentManager.new
    @mining_tool_type = settings.mining_buddy['tool_type'] || guess_tool_type
    @mining_tool_info = @equipment_manager.get_tool_info('mining', @mining_tool_type)
    @mining_tool_name = "#{@mining_tool_info.adjective} #{@mining_tool_info.name}"

    @equipment_manager.empty_hands

    Flags.add('mine-danger', 'The ground rumbles ominously', 'A bitter smell seeps into the air', 'The floor shudders briefly', 'continued mining .* hazardous', 'slightly dangerous because the ground')
    Flags.add('mine-exit', 'The entire wall of rock fractures at your blow and comes crashing down atop you')
    Flags.add('resource-level',
              'certain a scattering of resources', 'enormous quantity remains to be found', 'substantial quantity remains to be found',
              'good quantity remains to be found', 'decent quantity remains to be found', 'small quantity remains to be found',
              'enormous quantity \(5/5\) remains to be found', 'substantial quantity \(4/5\) remains to be found', 'good quantity \(3/5\) remains to be found',
              'decent quantity \(2/5\) remains to be found', 'small quantity \(1/5\) remains to be found', 'scattering of resources \(0/5\) remains to be found')

    @mining_skip_populated = settings.mining_skip_populated
    @loot_list = settings.mining_buddy_vein_list
    @use_packet = settings.mine_use_packet
    @ignored_rock_sizes = settings.mining_ignored_stone_sizes
    @ignored_deed = settings.mining_ignored_deed_sizes
    @mining_attempt_timer = settings.mining_attempt_timer

    @equipment_manager.get_tool?('mining', @mining_tool_type)

    DRC.bput('prospect', 'roundtime', 'You carefully scan')

    @multiplier = @mining_tool_type == "pickaxe" ? 4 : 5

    mine(@multiplier * resource_level)

    while DRC.bput('prospect careful', 'roundtime', 'You carefully scan')
      bput('prospect', 'roundtime', 'You carefully scan')
      results = reget(10, 'can be mined here')
      waitrt?
      break if results.nil?
      mine(@multiplier * resource_level)
    end

    @equipment_manager.return_tool?('mining', @mining_tool_type)
  end

  def guess_tool_type
    return 'shovel' unless @settings.mining_implement
    return 'shovel' if @settings.mining_implement =~ /shovel/i
    return 'pickaxe' if @settings.mining_implement =~ /pick/i

    DRC.message('Assuming you want to use a shovel to mine, cause you are missing settings.mining_buddy.tool_type')
    return 'shovel'
  end

  def resource_level
    case Flags['resource-level'][0]
    when 'certain a scattering of resources', 'scattering of resources (0/5) remains to be found'
      1
    when 'enormous quantity remains to be found', 'enormous quantity (5/5) remains to be found'
      6
    when 'substantial quantity remains to be found', 'substantial quantity (4/5) remains to be found'
      5
    when 'good quantity remains to be found', 'good quantity (3/5) remains to be found'
      4
    when 'decent quantity remains to be found', 'decent quantity (2/5) remains to be found'
      3
    when 'small quantity remains to be found', 'small quantity (1/5) remains to be found'
      2
    end
  end

  def handle_danger
    fput('exit') if Flags['mine-exit']
    fix_standing

    if bleeding?
      snapshot = Room.current.id
      DRC.bput("get #{@mining_tool_name}", 'You get', 'You are already')
      @equipment_manager.return_tool?('mining', @mining_tool_type)

      wait_for_script_to_complete('safe-room')
      DRCT.walk_to(snapshot)

      if @mining_skip_populated && !DRRoom.pcs.empty?
        DRC.message("Returned from healing and another player is in the room. Returning to mining-buddy to move on!")
      end

      @equipment_manager.get_tool?('mining', @mining_tool_type)
    end

    return unless Flags['mine-danger']
    waitrt?
    until /danger|find nothing of concern/ =~ bput('prospect danger', 'Unfortunately', 'shown a way to significantly reduce the danger', 'find nothing of concern')
      pause
      waitrt?
    end
    Flags.reset('mine-danger')
  end

  def mine(count)
    waitrt?
    handle_danger

    if count.zero?
      DRC.bput('prospect', 'roundtime', 'You carefully scan')
      results = reget(10, 'can be mined here')
      waitrt?
      return if results.nil?

      mine(@multiplier * resource_level)
      return
    end

    DRC.bput('mine', 'roundtime')
    pause @mining_attempt_timer
    waitrt?

    @loot_list.each do |item|
      matches = DRRoom.room_objs.grep(/(?:\b|^)#{item}(?:\b|$)/i)
      matches.each do |match|
        next if @ignored_rock_sizes.any? { |x| match =~ /\b#{x}\b/i }
        noun = match.scan(/\w+/).last
        if @use_packet && @ignored_deed.none? { |x| match =~ /\b#{x}\b/i } && packet?
          DRC.bput("push #{item} #{noun} with my packet", 'You push')
          DRC.bput('stow my packet', 'You put', 'Stow what')
          DRC.bput('stow deed', 'You put')
        else
          DRC.bput("stow #{noun}", 'You put')
        end
      end
    end

    mine(count - 1)
  end

  def packet?
    DRC.bput('get my packet', 'You get', 'What were you referring to') == 'You get'
  end
end

before_dying do
  Flags.delete('mine-danger')
  Flags.delete('mine-exit')
  Flags.delete('resource-level')
end

Mine.new
