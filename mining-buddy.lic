=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#mining-buddy
=end

custom_require.call(%w[common common-items common-money common-travel drinfomon])

class MiningBuddy
  include DRC
  include DRCI
  include DRCM

  def initialize
    @debug = UserVars.mining_debug || @settings.mining_buddy['debug']
    @settings = get_settings

    @equipment_manager = EquipmentManager.new
    @mining_tool_type = @settings.mining_buddy['tool_type'] || guess_tool_type
    @mining_tool_info = @equipment_manager.get_tool_info('mining', @mining_tool_type)
    @mining_tool_name = "#{@mining_tool_info.adjective} #{@mining_tool_info.name}"

    @area_list = get_data('mining').mining_buddy_rooms
    @areas = @settings.mines_to_mine
    @skip_populated = @settings.mining_skip_populated
    @mine_every_room = @settings.mining_buddy_mine_every_room
    @vein_list = @settings.mining_buddy_vein_list
    @use_packet = @settings.mine_use_packet
    @hometown = @settings.hometown

    deeds_data = get_data('crafting').deeds[@hometown]
    @deeds_room = deeds_data['room']
    @deeds_number = deeds_data['medium_number']
    echo("#{@areas}:#{@vein_list}") if @debug

    @repair_data = get_data('town')[@hometown]['metal_repair']

    ensure_copper_on_hand(10_000, @settings)

    if @use_packet
      buy_deed_packet unless exists?('packet')
      buy_deed_packet unless exists?('second packet')

      first = DRC.bput('look first packet', 'You count \d+').scan(/\d+/).first.to_i
      second = DRC.bput('look second packet', 'You count \d+').scan(/\d+/).first.to_i

      if second < first
        fput('get my second packet')
        fput('stow my packet')
      end
    end

    wait_for_script_to_complete('buff', ['mining'])

    DRC.bput('speculate luck', '^You focus your mind on the world around you', '^You are already focusing on the world around you.', '^Your pattern-matching skills are still exhausted') if DRStats.trader? && DRStats.circle >= 65

    @areas.each { |area_name| mine_rooms(@area_list[area_name]) }
  end

  def buy_deed_packet
    if @deeds_room && @deeds_number
      DRCT.order_item(@deeds_room, @deeds_number)
    else
      echo 'Your hometown is missing data for purchasing deeds!'
      exit
    end
    fput('stow my packet')
  end

  def guess_tool_type
    return 'shovel' unless @settings.mining_implement
    return 'shovel' if @settings.mining_implement =~ /shovel/i
    return 'pickaxe' if @settings.mining_implement =~ /pick/i

    DRC.message('Assuming you want to use a shovel to mine, cause you are missing settings.mining_buddy.tool_type')
    return 'shovel'
  end

  def check_repair
    @equipment_manager.get_tool?('mining', @mining_tool_type)
    result = DRC.bput("anal my #{@mining_tool_name}", 'practically in mint', 'pristine condition', 'in good condition', 'crafting tool and it is rather scuffed up', 'Roundtime')
    @equipment_manager.return_tool?('mining', @mining_tool_type)

    return unless /roundtime/i =~ result

    DRCT.walk_to(@repair_data['id'])

    @equipment_manager.get_tool?('mining', @mining_tool_type)
    fput("give #{@repair_data['name']}")
    fput("give #{@repair_data['name']}")
    pause 10 until bput('look at my ticket', 'should be ready by now', 'Looking at the') == 'should be ready by now'
    fput("give #{@repair_data['name']}")
    @equipment_manager.return_tool?('mining', @mining_tool_type)
  end

  def mine_rooms(rooms)
    rooms.each do |room|
      wait_for_script_to_complete('safe-room') if bleeding?
      next unless mine?(room)
      check_repair
      DRCA.do_buffs(@settings, 'mining')
      bput('speculate luck', '^You focus your mind on the world around you', '^You are already focusing on the world around you.', '^Your pattern-matching skills are still exhausted') if DRStats.trader? && DRStats.circle >= 65
    end
  end

  def mine?(room)
    waitrt?
    DRCT.walk_to(room)

    unless DRRoom.pcs.empty?
      return false if @skip_populated
      fput('wave')
    end

    unless @mine_every_room
      DRC.bput('prospect', 'Roundtime')
      results = reget(20, 'can be mined here')

      echo("Prospect saw: #{results}") if @debug

      return false if results.nil?
      return false unless results
                          .each_with_object([]) { |line, array| array << line.match(/You are certain that (.*) can be mined here/i)[1] }
                          .reject(&:nil?)
                          .map(&:downcase)
                          .any? { |vein| @vein_list.map(&:downcase).include?(vein) }
    end

    waitrt?
    wait_for_script_to_complete('mine')
    true
  end
end

MiningBuddy.new
