# quiet
=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#workorders
=end

custom_require.call(%w[common common-crafting common-items common-money common-travel drinfomon])

class WorkOrders
  include DRC
  include DRCC
  include DRCI
  include DRCM
  include DRCT

  def initialize
    arg_definitions = [
      [
        { name: 'discipline', options: %w[blacksmithing weaponsmithing tailoring shaping carving remedies artificing], description: 'What type of workorder to do?' },
        { name: 'repair', regex: /repair/i, optional: true, description: 'repair tools instead of crafting' }
      ]
    ]

    args = parse_args(arg_definitions)
    work_order(args.discipline, args.repair)
  end

  def work_order(discipline, repair)
    @settings = get_settings
    crafting_data = get_data('crafting')
    @recipe_parts = crafting_data['recipe_parts']
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @hometown = @settings.hometown
    @use_own_ingot_type = @settings.use_own_ingot_type
    @deed_own_ingot = @settings.deed_own_ingot
    deeds_data = get_data('crafting').deeds[@hometown]
    @deeds_room = deeds_data['room']
    @deeds_number = deeds_data['medium_number']
    @carving_type = @settings.carving_workorder_material_type
    @min_items = @settings.workorder_min_items
    @max_items = @settings.workorder_max_items
    @recipe_overrides = @settings.workorder_recipes || {}
    @cash_on_hand = @settings.workorder_cash_on_hand
    @craft_max_mindstate = @settings.craft_max_mindstate
    @retain_crafting_materials = @settings.retain_crafting_materials
    @workorders_repair = @settings.workorders_repair
    @workorders_override_store = @settings.workorders_override_store
    @equipment_manager = EquipmentManager.new

    wait_for_script_to_complete('safe-room', ['force']) if @settings.workorders_force_heal

    info = crafting_data[discipline][@hometown]
    if discipline == 'weaponsmithing'
      info = crafting_data['blacksmithing'][@hometown]
    end

    recipes = if @recipe_overrides[discipline]
                get_data('recipes').crafting_recipes.select { |recipe| recipe['type'] =~ /#{discipline}/i && @recipe_overrides[discipline].find { |name| recipe['name'] =~ /#{name}/i } }
              else
                get_data('recipes').crafting_recipes.select { |recipe| recipe['work_order'] && recipe['type'] =~ /#{discipline}/i }
              end

    if discipline == 'carving'
      recipes = recipes.select { |x| x['material'] == @carving_type }
    end

    unless info
      echo("No crafting settings found for discipline: #{discipline}")
      exit
    end

    unless repair
      if @settings.workorder_diff.is_a?(Hash)
        item_name, quantity = request_work_order(recipes, info['npc-rooms'], info['npc'], info['npc_last_name'], discipline, info['logbook'], @settings.workorder_diff[discipline])
      else
        item_name, quantity = request_work_order(recipes, info['npc-rooms'], info['npc'], info['npc_last_name'], discipline, info['logbook'], @settings.workorder_diff)
      end
      item = recipes.find { |r| r['name'] == item_name }
    end
    skill = ''

    case discipline
    when 'blacksmithing', 'weaponsmithing', 'armorsmithing'
      skill = 'Forging'
      @craft_type = 'forging'
      @belt = @settings.forging_belt
      craft_method = if @use_own_ingot_type
                       :forge_items_with_own_ingot
                     else
                       :forge_items
                     end
    when 'tailoring'
      skill = 'Outfitting'
      @craft_type = 'outfitting'
      @outfitting_room = @settings.outfitting_room
      @belt = @settings.outfitting_belt
      case item['chapter']
      when 4, 2, 3
        craft_method = :sew_items
      when 5
        craft_method = :knit_items
      else
        if item['chapter']
          echo("UNKNOWN CHAPTER FOR TAILORING ITEM #{item}")
          exit
        end
      end
    when 'shaping'
      skill = 'Engineering'
      @craft_type = 'shaping'
      @engineering_room = @settings.engineering_room
      @belt = @settings.engineering_belt
      craft_method = :shape_items
    when 'carving'
      skill = 'Engineering'
      @craft_type = 'carving'
      @engineering_room = @settings.engineering_room
      @belt = @settings.engineering_belt
      craft_method = :carve_items
    when 'remedies'
      skill = 'Alchemy'
      @craft_type = 'alchemy'
      @alchemy_room = @settings.alchemy_room
      @belt = @settings.alchemy_belt
      craft_method = :remedy_items
    when 'artificing'
      skill = 'Enchanting'
      @craft_type = 'enchanting'
      @enchanting_room = @settings.enchanting_room
      @belt = @settings.enchanting_belt
      craft_method = :enchanting_items
    else
      echo 'No discipline found?'
      return
    end

    return repair_items(info) if repair

    if DRSkill.getxp(skill) > @craft_max_mindstate
      echo("Exiting because your current mindstate for #{skill} over the set maximum craft_max_mindstate:#{@craft_max_mindstate}")
      exit
    end

    send(craft_method, info, item, quantity)

    complete_work_order(info)

    repair_items(info) if @workorders_repair
  end

  def complete_work_order(info)
    stow_hands
    loop do
      find_npc(info['npc-rooms'], info['npc_last_name'])
      bput("get my #{info['logbook']} logbook", 'You get')
      DRC.release_invisibility
      result = bput("give log to #{info['npc']}", 'You hand', 'You can', 'What were you', 'Apparently the work order time limit has expired', 'The work order isn\'t yet complete')
      break unless ['What were you', 'You can'].include?(result)
    end
    stow_tool('logbook')
  end

  def get_tool(name)
    get_crafting_item(name, @bag, @bag_items, @belt, true)
  end

  def stow_tool(name)
    stow_crafting_item(name, @bag, @belt)
  end

  def repair_items(info)
    walk_to info['repair-room']

    tools = @equipment_manager.get_tool_info_for_craft(@craft_type)

    unless tools.size >= 5
      need_to_repair = tools.find do |tool|
        @equipment_manager.get_tool?(@craft_type, tool.tool_types[0])
        result = bput("analyze my #{tool.name}", 'Analyze what', 'practically in mint', 'pristine condition', 'Roundtime')
        next if result == 'Analyze what'
        waitrt?
        @equipment_manager.return_tool?(@craft_type, tool.tool_types[0])
        /roundtime/i =~ result
      end
      return unless need_to_repair
    end

    tools.each do |tool|
      @equipment_manager.get_tool?(@craft_type, tool.tool_types[0])
      case bput("give #{info['repair-npc']}", "I don't repair those here", 'What is it', "There isn't a scratch on that", 'Just give it to me again', 'I will not', "I can't fix those.  They only have so many uses and then you must buy another.")
      when /scratch/, /I will not/, /They only have so many uses/
        @equipment_manager.return_tool?(@craft_type, tool.tool_types[0])
      when /give/
        bput("give #{info['repair-npc']}", 'repair ticket')
        bput('stow ticket', 'You put')
      end
    end

    while bput("get my #{info['repair-npc']} ticket", 'You get', 'What were') == 'You get'
      pause 30 until bput('look at my ticket', 'should be ready by now', 'Looking at the') == 'should be ready by now'
      bput("give #{info['repair-npc']}", 'You hand')
      pause 1
      @equipment_manager.return_held_gear
    end
  end

  def find_recipe(info, recipe, quantity)
    volume_label = recipe['material'] == 'bone' ? 'stock-bone-volume' : 'stock-volume'
    items_per_stock = info[volume_label] / recipe['volume']
    spare_stock = (info[volume_label] % recipe['volume']).nonzero?

    scrap = spare_stock || (quantity % items_per_stock).nonzero?

    [recipe, items_per_stock, spare_stock, scrap]
  end

  def go_door
    fput('open door')
    fix_standing
    fput('go door')
  end

  def carve_items(info, item, quantity)
    ensure_copper_on_hand(@cash_on_hand || 5000, @settings)
    recipe, items_per_stock, spare_stock, scrap = find_recipe(info, item, quantity)
    material_noun = %w[deed pebble stone rock rock boulder]
    material_volume = 0
    bone_carving = recipe['material'] == 'bone'

    if bone_carving
      stock_name = 'stock-bone-name'
      stock_number = 'stock-bone-number'
    else
      stock_name = 'stock-name'
      stock_number = 'stock-number'
    end

    if search?('surface polish')
      bput('get my surface polish', 'You get')
      /(\d+)/ =~ bput('count my polish', 'The surface polish has \d+ uses remaining')
      if Regexp.last_match(1).to_i < 3
        stow_hands
        DRCT.dispose('polish')
        DRCT.order_item(info['polish-room'], info['polish-number'])
      end
    else
      DRCT.order_item(info['polish-room'], info['polish-number'])
    end
    stow_hands

    order_parts(recipe['part'], quantity) if recipe['part']

    quantity.times do |count|
      DRCT.dispose("#{info['stock-name']} #{material_noun[material_volume]}") if count > 0 && spare_stock
      if items_per_stock.zero? || (count % items_per_stock).zero?
        if count > 0
          go_door
          pause 0.5 until Room.current.id
        end
        if bone_carving
          bput("get my #{info[stock_name]} stack", 'What were', 'You get', 'You pick')
          while bput("count my #{info[stock_name]} stack", 'You count.*\d+', 'I could not').scan(/\d+/).first.to_i < recipe['volume']
            DRCT.order_item(info['stock-room'], info[stock_number])
            bput('combine', 'combine')
          end
        else
          DRCT.order_item(info['stock-room'], info[stock_number])
          if @engineering_room
            fput('tap my deed')
            material_volume = info['stock-volume']
          else
            material_volume = 0
          end
        end
        stow_hands
      end

      if !bone_carving
        rock_result = bput("get #{info['stock-name']} #{material_noun[material_volume]}", 'You get', 'What were', 'You are not strong', 'You pick up', 'but can\'t quite lift it')
        find_shaping_room(@hometown, @engineering_room) unless rock_result =~ /You are not strong|but can\'t quite lift it/i
      else
        find_shaping_room(@hometown, @engineering_room)
      end
      bput('swap', 'You move') if right_hand =~ /#{@noun}/i

      wait_for_script_to_complete('carve', [recipe['chapter'], recipe['name'], info[stock_name], bone_carving ? 'stack' : material_noun[material_volume], recipe['noun']])

      material_volume = info['stock-volume'] if material_volume == 0
      material_volume -= recipe['volume']

      bundle_item(recipe['noun'], info['logbook'])
    end
    if bone_carving
      fput("get my #{info[stock_name]} stack")
      if checkleft || checkright
        stow_hands
        DRCT.dispose("#{info[stock_name]} stack") unless @retain_crafting_materials
      end
    elsif scrap
      DRCT.dispose("#{info['stock-name']} #{material_noun[material_volume]}")
    end
    go_door if XMLData.room_title.include?('Workshop')
  end

  def shape_items(info, item, quantity)
    ensure_copper_on_hand(@cash_on_hand || 10_000, @settings)
    recipe, items_per_stock, spare_stock, scrap = find_recipe(info, item, quantity)

    quantity.times do |count|
      if items_per_stock.zero? || (count % items_per_stock).zero?
        if count > 0 && spare_stock && !@retain_crafting_materials
          DRCT.dispose("#{info['stock-name']} lumber")
        elsif count > 0 && spare_stock && @retain_crafting_materials
          bput('stow feet', 'You put', 'What', 'Stow what?')
          bput("get my #{info['stock-name']} lumber", 'What were', 'You get')
          bput("get my other #{info['stock-name']} lumber", 'What were', 'You get')
          bput('combine', 'combine')
          stow_tool(left_hand)
          stow_tool(right_hand)
        end

        if count > 0
          go_door
          pause 0.5 until Room.current.id
        end
        bput("get my #{info['stock-name']} lumber", 'What were', 'You get')
        while bput("count my #{info['stock-name']} lumber", 'You count.*\d+', 'I could not').scan(/\d+/).first.to_i < recipe['volume']
          DRCT.order_item(info['stock-room'], info['stock-number'])
          bput('combine', 'combine')
        end
        stow_tool('lumber')

        if search?('glue')
          bput('get my glue', 'You get')
          /(\d+)/ =~ bput('count my glue', 'The wood glue has *\d+ uses remaining')
          if Regexp.last_match(1).to_i < quantity
            stow_tool('glue')
            DRCT.dispose('glue')
            DRCT.order_item(info['tool-room'], info['glue-number'])
          end
        else
          DRCT.order_item(info['tool-room'], info['glue-number'])
        end
        stow_tool('glue')

        if search?('wood stain')
          bput('get my wood stain', 'What were', 'You get')
          /(\d+)/ =~ bput('count my wood stain', 'The wood stain has *\d+ uses remaining')
          if Regexp.last_match(1).to_i < quantity
            stow_tool('wood stain')
            DRCT.dispose('wood stain')
            DRCT.order_item(info['tool-room'], info['stain-number'])
          end
        else
          DRCT.order_item(info['tool-room'], info['stain-number'])
        end
        stow_tool('wood stain')

        case bput('tap my clamps', 'I could not find', 'You tap some')
        when 'I could not find'
          DRCT.order_item(info['tool-room'], info['clamps-number'])
          stow_tool('clamps')
        end

        buy_parts(recipe['part'], info['part-room'])
        find_shaping_room(@hometown, @engineering_room)
      end

      wait_for_script_to_complete('shape', ['log', recipe['chapter'], recipe['name'], info['stock-name'], recipe['noun']])
      case bput('read my engineering logbook', 'This work order appears to be complete.', 'You must bundle and deliver \d+ more')
      when /You must bundle and deliver \d+ more /
        log_num = Regexp.last_match(1).to_i
        break if count + 1 + log_num != quantity
      end
    end

    DRCT.dispose("#{info['stock-name']} lumber") if scrap && !@retain_crafting_materials
    if @retain_crafting_materials
      stow_tool(left_hand)
      stow_tool(right_hand)
      if scrap
        bput('stow feet', 'You put', 'What', 'Stow what?')
        bput("get my #{info['stock-name']} lumber", 'What were', 'You get')
        bput("get my other #{info['stock-name']} lumber", 'What were', 'You get')
        bput('combine', 'combine')
        stow_tool(left_hand)
        stow_tool(right_hand)
      end
    end
    go_door if XMLData.room_title.include?('Workshop')
  end

  def buy_parts(parts, partroom)
    parts.each do |part|
      DRCT.buy_item(partroom, part)
      stow_tool(part)
    end
  end

  def order_parts(parts, quantity)
    parts.each do |part|
      data = @recipe_parts[part][@hometown]
      quantity.times do
        if data['part-number']
          DRCT.order_item(data['part-room'], data['part-number'])
        else
          DRCT.buy_item(data['part-room'], part)
        end
        stow_tool(part)
      end
    end
  end

  def order_fabric(stock_room, stock_needed, stock_number, type)
    stock_needed.times do
      DRCT.order_item(stock_room, stock_number)
      bput("get my #{type} from my #{@bag}", 'What were', 'You get')
      next unless left_hand && right_hand
      bput("combine #{type} with #{type}", 'You combine')
    end
    stow_tool(type)
  end

  def sew_items(info, recipe, quantity)
    ensure_copper_on_hand(@cash_on_hand || 5000, @settings)

    existing = if bput("get #{info['sew-stock-name']} cloth from my #{@bag}", 'What were', 'You get') == 'What were'
                 0
               else
                 while bput("get #{info['sew-stock-name']} cloth from my #{@bag}", 'What were', 'You get') == 'You get'
                   bput("combine #{info['sew-stock-name']} cloth with #{info['sew-stock-name']} cloth", 'You combine')
                 end
                 bput("count my #{info['sew-stock-name']} cloth", 'You count out \d+ yards').scan(/\d+/).first.to_i
               end
    stock_needed = ((quantity * recipe['volume'] - existing) / 10.0).ceil
    order_fabric(info['stock-room'], stock_needed, info['sew-stock-number'], "#{info['sew-stock-name']} cloth")
    order_parts(recipe['part'], quantity) if recipe['part']

    find_sewing_room(@hometown, @outfitting_room)

    quantity.times do |count|
      wait_for_script_to_complete('sew', ['log', 'sewing', recipe['chapter'], recipe['name'], recipe['noun'], info['sew-stock-name']])
      case bput('read my outfitting logbook', 'This work order appears to be complete.', 'You must bundle and deliver \d+ more')
      when /You must bundle and deliver \d+ more /
        log_num = Regexp.last_match(1).to_i
        break if count + 1 + log_num != quantity
      end
    end
    leftover = (quantity * recipe['volume']) % 10 != 0
    DRCT.dispose("#{info['sew-stock-name']} cloth") if leftover && !@retain_crafting_materials
    stow_tool(left_hand) if @retain_crafting_materials
    stow_tool(right_hand) if @retain_crafting_materials
  end

  def knit_items(info, recipe, quantity)
    ensure_copper_on_hand(@cash_on_hand || 5000, @settings)

    existing = if bput("get yarn from my #{@bag}", 'What were', 'You get') == 'What were'
                 0
               else
                 while bput("get yarn from my #{@bag}", 'What were', 'You get') == 'You get'
                   bput("combine #{info['sew-stock-name']} yarn with #{info['sew-stock-name']} yarn", 'You combine')
                 end
                 bput('count my yarn', 'You count out \d+ yards').scan(/\d+/).first.to_i
               end
    stock_needed = ((quantity * recipe['volume'] - existing) / 100.0).ceil
    order_fabric(info['stock-room'], stock_needed, info['knit-stock-number'], 'yarn')

    find_sewing_room(@hometown, @outfitting_room)

    quantity.times do |count|
      wait_for_script_to_complete('sew', ['log', 'knitting', recipe['chapter'], recipe['name'], recipe['noun'], info['knit-stock-name']])
      case bput('read my outfitting logbook', 'This work order appears to be complete.', 'You must bundle and deliver \d+ more')
      when /You must bundle and deliver \d+ more /
        log_num = Regexp.last_match(1).to_i
        break if count + 1 + log_num != quantity
      end
    end
    leftover = (quantity * recipe['volume']) % 10 != 0
    DRCT.dispose("#{info['knit-stock-name']} yarn") if leftover && !@retain_crafting_materials
    stow_tool(left_hand) if @retain_crafting_materials
    stow_tool(right_hand) if @retain_crafting_materials
  end

  def order_rem(stock_room, stock_needed, stock_number)
    stock_needed.times do
      DRCT.order_item(stock_room, stock_number)
      stow_tool(left_hand)
      stow_tool(right_hand)
      next unless left_hand && right_hand
    end
  end

  def gather_process_herb(herb, herb_volume_to_purchase)
    echo herb
    wait_for_script_to_complete('alchemy',[herb, 'forage', herb_volume_to_purchase])
    wait_for_script_to_complete('alchemy',[herb, 'prepare'])
  end

  # Function which will attempt to combine any stacks of herbs in your inventory, will count them, and determine if more need to be ordered.
  def count_combine_rem(stock_room, quantity, herb, herb_stock, is_herb2 = false)
    # Initialize variables
    found_stack = true
    herb_volume_total = 0
    last_herb_volume = 0
    last_descriptor = ''
    stack_descriptor = ''

    # We have to only ever use the last word in a multi-word herb.  We will need to be careful when counting because of this.
    # This is to resolve "red flower" vs "blue flower" because "count third red flower in my bag" fails.
    # We must instead do a generic "tap third flower in my bag" and determine if we're tapping the right kind of flowers from the response, then actually count them.
    herb_for_tapping = herb.gsub(/\s+/m, ' ').strip.split(' ').last

    # Calculate the volume of the herbs that we will be searching our inventory for and/or buying.
    # Assume that each unit we need to craft will take 25 volumes of our herb. If it's a second herb, it requires a minimum of one volume, but may require more.
    need_herb_volume = is_herb2 ? (quantity * 2) : (quantity * 25)

    # Loop through all the stacks of herbs we might have in our backpack and find out how much volume we have total.
    ordinals = $ORDINALS.dup
    begin
      stack_descriptor = ordinals.shift

      # TODO: Solve the Inkin problem, which (very rarely) results in never counting any herbs, and always buying extra.
      # The "You lightly tap" result here is what happens if you try to do this in a room with somebody having a name that start with "In" .... like... "Inkin"
      # example:
      #   [workorders]>tap first flower in my haversack
      #   You lightly tap Inkin on the shoulder.
      /You tap (.*) inside your|I could not find|You lightly tap/ =~ bput("tap #{stack_descriptor} #{herb_for_tapping} in my #{@bag}", 'You tap (.*) inside your', 'I could not find', 'You lightly tap')
      tap_result = Regexp.last_match(1)
      if tap_result.nil?
        herb_volume = 0
        found_stack = false
      else
        # Check to see if the generic item we just tapped matches the exact item we are looking for.
        herb_volume = if tap_result.include? herb
                        bput("count #{stack_descriptor} #{herb_for_tapping} in my #{@bag}", 'I could not find', 'You count out \d+ pieces.').scan(/\d+/).first.to_i
                      else
                        # Since this looks like the wrong item, we can't count it's volume, and we just move on.
                        0
                      end
      end

      if herb_volume > 0
        herb_volume_total += herb_volume

        # For convenience, if the volumes of the last herb, and this herb, add up to 75 or less, we will combine them.
        if (herb_volume + last_herb_volume) <= 75 && last_herb_volume > 0
          bput("get #{stack_descriptor} #{herb_for_tapping} from my #{@bag}", 'You get')
          bput("get #{last_descriptor} #{herb_for_tapping} from my #{@bag}", 'You get')
          case bput('combine', 'You combine', 'That stack of herbs')
          # If we combine the stacks, we have to account for the fact that we now have one less stack, which means we have to add this descriptor back to our array.
          # If for some reason we can't seem to combine these, then simply store them back in our bag and keep going.
          when 'You combine'
            last_herb_volume = herb_volume + last_herb_volume
            ordinals.unshift(stack_descriptor)
          end
          stow_tool(left_hand)
          stow_tool(right_hand)
        else
          # We can't do any combining with this herb, but let's remember it in case the next herb can combine with it.
          last_descriptor = stack_descriptor
          last_herb_volume = herb_volume
        end
      end
    end while found_stack && ordinals.count > 0

    # Determine how much volume we are short.
    # The assumption here is that each stack of what is ordered is 25 pieces.
    herb_volume_to_purchase = need_herb_volume - herb_volume_total
    return unless herb_volume_to_purchase > 0

    herb_to_purchase = (herb_volume_to_purchase / 25.0).ceil
    gather_process_herb(herb, herb_volume_to_purchase) if herb_stock.nil? || @workorders_override_store
    order_rem(stock_room, herb_to_purchase, herb_stock) if herb_stock && !@workorders_override_store
    stow_tool(left_hand)
    stow_tool(right_hand)
  end

  def remedy_items(info, recipe, quantity)
    ensure_copper_on_hand(@cash_on_hand || 5000, @settings)
    herb2_needed = ''
    liquid_used = ''

    val_map = { 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9, 'ten' => 10, 'eleven' => 11, 'twelve' => 12, 'thirteen' => 13, 'fourteen' => 14, 'fifteen' => 15, 'sixteen' => 16, 'seventeen' => 17, 'eighteen' => 18, 'nineteen' => 19, 'twenty' => 20, 'twenty-one' => 21, 'twenty-two' => 22, 'twenty-three' => 23, 'twenty-four' => 24, 'twenty-five' => 25, 'twenty-six' => 26, 'twenty-seven' => 27, 'twenty-eight' => 28, 'twenty-nine' => 29, 'thirty' => 30, 'thirty-one' => 31, 'thirty-two' => 32, 'thirty-three' => 33, 'thirty-four' => 34, 'thirty-five' => 35, 'thirty-six' => 36, 'thirty-seven' => 37, 'thirty-eight' => 38, 'thirty-nine' => 39, 'forty' => 40, 'forty-one' => 41, 'forty-two' => 42, 'forty-three' => 43, 'forty-four' => 44, 'forty-five' => 45, 'forty-six' => 46, 'forty-seven' => 47, 'forty-eight' => 48, 'forty-nine' => 49, 'fifty' => 50, 'sixty' => 60, 'seventy' => 70, 'eighty' => 80, 'ninety' => 90, 'hundred' => 100 }

    # Herb #1
    count_combine_rem(info['stock-room'], quantity, recipe['herb1'], recipe['herb1_stock'])

    # Herb #2
    if recipe['herb2'].nil?
      herb2_needed = 'na'
    else
      count_combine_rem(info['stock-room'], quantity, recipe['herb2'], recipe['herb2_stock'], true)
    end

    walk_to(@alchemy_room)

    leftovers = 0
    quantity.times do
      if herb2_needed == 'na'
        wait_for_script_to_complete('remedy', ['remedies', recipe['chapter'], recipe['name'], recipe['herb1'], herb2_needed, info['catalyst'], recipe['container'], recipe['noun']])
      else
        wait_for_script_to_complete('remedy', ['remedies', recipe['chapter'], recipe['name'], recipe['herb1'], recipe['herb2'], info['catalyst'], recipe['container'], recipe['noun']])
      end
      bput("get my #{info['logbook']} logbook", 'You get')
      case bput("bun my #{recipe['noun']} with logbook", 'You notate', 'You put', 'You notice the workorder', 'The work order requires items of a higher quality')
      when 'You notice the workorder'
        stow_tool(right_hand)
        bput("Mark my #{recipe['noun']} at 5", 'You measure')
        bput("Break my #{recipe['noun']}", 'You carefully')
        /(\d+)/ =~ bput("count my first #{recipe['noun']}", 'You count out \d+ uses remaining.')
        if Regexp.last_match(1).to_i == 5
          bput("stow my second #{recipe['noun']}", 'You put', 'You combine')
        else
          bput("stow my first #{recipe['noun']}", 'You put', 'You combine')
        end
        leftovers += 1
        bundle_item(recipe['noun'], info['logbook'])
      when 'You notate', 'You put'
        bput('stow my logbook', 'You put')
      when 'The work order requires items of a higher quality'
        dispose_trash(recipe['noun'])
        DRCT.dispose(recipe['herb1']) while recipe['herb1'] && exists?(recipe['herb1']) unless @retain_crafting_materials
        DRCT.dispose(recipe['herb2']) while recipe['herb2'] && exists?(recipe['herb2']) unless @retain_crafting_materials
        stow_tool(left_hand)
        stow_tool(right_hand)
        break
      end
    end
    leftovers.times { |_| DRCT.dispose(recipe['noun']) }
    DRCT.dispose(recipe['herb1']) while recipe['herb1'] && exists?(recipe['herb1']) unless @retain_crafting_materials
    DRCT.dispose(recipe['herb2']) while recipe['herb2'] && exists?(recipe['herb2']) unless @retain_crafting_materials
  end

  def forge_items(info, item, quantity)
    recipe, = find_recipe(info, item, quantity)
    remaining_volume = 0

    ensure_copper_on_hand(@cash_on_hand || 5000, @settings)

    quantity.times do
      if remaining_volume < recipe['volume']
        DRCT.dispose(info['stock-name'], info['trash-room']) if remaining_volume > 0
        DRCT.order_item(info['stock-room'], info['stock-number'])
        stow_hands
        remaining_volume = info['stock-volume']
      end

      wait_for_script_to_complete('smith', ['bronze', item['name']])
      bundle_item(recipe['noun'], info['logbook'])

      remaining_volume -= recipe['volume']
    end
    DRCT.dispose(info['stock-name'], info['trash-room']) if remaining_volume > 0
  end

  def ingot_volume
    res = bput('anal my ingot', 'About \d+ volume')
    res.scan(/\d+/).first.to_i
  end

  def deed_ingot_volume
    res = bput('read my deed', 'Volume:\s*\d+')
    res.scan(/\d+/).first.to_i
  end

  def forge_items_with_own_ingot(info, item, quantity)
    recipe, = find_recipe(info, item, quantity)

    if bput("get my #{@use_own_ingot_type} ingot", 'You get', 'What were') == 'What were'
      if bput("get my #{@use_own_ingot_type} deed", 'You get', 'What were') == 'What were'
        echo('out of material/deeds')
        exit
      else
        volume = deed_ingot_volume
        fput('tap deed')
        pause
        fput("get #{@use_own_ingot_type} ingot") unless checkleft || checkright
      end
    end

    volume ||= ingot_volume

    stow_hands
    smelt = false

    if volume < quantity * recipe['volume']
      smelt = true
      if bput("get my #{@use_own_ingot_type} deed", 'You get', 'What were') == 'What were'
        echo('out of material/deeds')
        stow_hands
        exit
      else
        volume = deed_ingot_volume
        fput('tap deed')
        pause
        fput("get #{@use_own_ingot_type} ingot") unless checkleft || checkright
      end
      volume = ingot_volume
    end

    stow_hands

    if volume < quantity * recipe['volume']
      echo('out of material/deeds')
      exit
    end

    quantity.times do
      wait_for_script_to_complete('smith', [@use_own_ingot_type, item['name']])
      bundle_item(recipe['noun'], info['logbook'])
    end

    if smelt
      find_empty_crucible(@hometown)
      2.times do
        fput("get my #{@use_own_ingot_type} ingot")
        fput('put my ingot in cruc')
      end
      wait_for_script_to_complete('smelt')
      stow_hands
    end

    return unless @deed_own_ingot
    unless DRC.bput('look my deed packet', /You count \d+ deed claim forms remaining/, /I could not find what you were referring to/) =~ /You count \d+ deed claim forms remaining/
      ensure_copper_on_hand(@cash_on_hand || 10_000, @settings)
      DRCT.order_item(@deeds_room, @deeds_number)
      fput('stow my packet')
    end
    fput("get my #{@use_own_ingot_type} ingot")
    fput('get packet')
    fput('push my ingot with packet')
    fput('stow packet')
    fput('stow deed')
  end

  def enchanting_items(info, recipe, quantity)
    ensure_copper_on_hand(@cash_on_hand || 20_000, @settings)
    # Enchant Sigil #1
    order_enchant(info['stock-room'], quantity, recipe['enchant_stock1'], @bag, @belt)

    # Enchant Sigil #2
    order_enchant(info['stock-room'], quantity, recipe['enchant_stock2'], @bag, @belt) unless recipe['enchant_stock2'].nil?

    # Sigil 3
    order_enchant(info['stock-room'], quantity, recipe['enchant_stock3'], @bag, @belt) unless recipe['enchant_stock3'].nil?

    # Enchant component #1
    order_enchant(info['stock-room'], quantity, recipe['item'], @bag, @belt) unless recipe['item'].nil?

    # Parts #
    order_parts(recipe['part'], quantity) if recipe['part']

    # Check for fount #
    fount(info['tool-room'], 1, info['fount'], quantity, @bag, @bag_items, @belt)

    stow_hands

    # Start crafting #
    find_enchanting_room(@hometown, @enchanting_room)

    quantity.times do
      wait_for_script_to_complete('enchant', [recipe['chapter'], recipe['name'], recipe['noun']])
      bundle_item(recipe['noun'], info['logbook'])
      case bput('read my enchanting logbook', 'This work order appears to be complete.', 'You must bundle and deliver \d+ more')
      when /You must bundle and deliver \d+ more /
        log_num = Regexp.last_match(1).to_i
        break if count + 1 + log_num != quantity
      end
    end
  end

  def bundle_item(noun, logbook)
    noun = 'fount' if noun == 'small sphere'
    bput("get my #{logbook} logbook", 'You get')
    if /requires items of/ =~ bput("bundle my #{noun} with my logbook", 'You notate the', 'This work order has expired', 'The work order requires items of a higher quality', 'That\'s not going to work')
      DRCT.dispose(noun)
    end
    stow_hands
  end

  def request_work_order(recipes, npc_rooms, npc, npc_last_name, discipline, logbook, diff)
    match_names = recipes.map { |x| x['name'] }
    diff ||= 'challenging'
    stow_hands
    500.times do
      find_npc(npc_rooms, npc_last_name)
      bput("get my #{logbook} logbook", 'You get') unless left_hand || right_hand
      case bput("ask #{npc} for #{diff} #{discipline} work", '^To whom', 'order for .* I need \d+ ', 'order for .* I need \d+ stacks \(5 uses each\) of .* quality', 'You realize you have items bundled with the logbook', 'You want to ask about shadowlings')
      when 'You want to ask about shadowlings'
        pause 10
        fput('say Hmm.')
      when /order for (.*)\. I need (\d+) /
        item = Regexp.last_match(1)
        quantity = Regexp.last_match(2).to_i
        if @min_items <= quantity && quantity <= @max_items && match_names.include?(item)
          stow_tool('logbook')
          return [item, quantity]
        end
      when /order for (.*)\. I need (\d+) stacks \(5 uses each\) of .* quality/
        item = Regexp.last_match(1)
        quantity = Regexp.last_match(2).to_i
        if @min_items <= quantity && quantity <= @max_items && match_names.include?(item)
          stow_tool('logbook')
          return [item, quantity]
        end
      when 'You realize you have items bundled with the logbook'
        bput('untie my logbook', 'You untie')
        if left_hand.include?('logbook')
          fput("drop my #{right_hand}")
        else
          fput("drop my #{left_hand}")
        end
        fput('get logbook') unless [left_hand, right_hand].grep(/logbook/i).any?
      end
    end
    stow_tool('logbook')
    exit
  end

  def find_npc(room_list, npc)
    room_list.each do |room_id|
      break if DRRoom.npcs.include?(npc)
      walk_to(room_id)
    end
  end
end

WorkOrders.new
